#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_imports)]
#![allow(non_upper_case_globals)]
/* automatically generated by rust-bindgen 0.59.1 */

pub const WIREDTIGER_VERSION_MAJOR: u32 = 11;
pub const WIREDTIGER_VERSION_MINOR: u32 = 3;
pub const WIREDTIGER_VERSION_PATCH: u32 = 0;
pub const WIREDTIGER_VERSION_STRING: &'static [u8; 39usize] =
  b"WiredTiger 11.3.0: (November 16, 2023)\0";
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const WT_ITEM_ALIGNED: u32 = 1;
pub const WT_ITEM_INUSE: u32 = 2;
pub const WT_CURSTD_APPEND: u32 = 1;
pub const WT_CURSTD_BOUND_LOWER: u32 = 2;
pub const WT_CURSTD_BOUND_LOWER_INCLUSIVE: u32 = 4;
pub const WT_CURSTD_BOUND_UPPER: u32 = 8;
pub const WT_CURSTD_BOUND_UPPER_INCLUSIVE: u32 = 16;
pub const WT_CURSTD_BULK: u32 = 32;
pub const WT_CURSTD_CACHEABLE: u32 = 64;
pub const WT_CURSTD_CACHED: u32 = 128;
pub const WT_CURSTD_CACHED_WITH_MEM: u32 = 256;
pub const WT_CURSTD_DEAD: u32 = 512;
pub const WT_CURSTD_DEBUG_COPY_KEY: u32 = 1024;
pub const WT_CURSTD_DEBUG_COPY_VALUE: u32 = 2048;
pub const WT_CURSTD_DEBUG_RESET_EVICT: u32 = 4096;
pub const WT_CURSTD_DUMP_HEX: u32 = 8192;
pub const WT_CURSTD_DUMP_JSON: u32 = 16384;
pub const WT_CURSTD_DUMP_PRETTY: u32 = 32768;
pub const WT_CURSTD_DUMP_PRINT: u32 = 65536;
pub const WT_CURSTD_DUP_NO_VALUE: u32 = 131072;
pub const WT_CURSTD_EVICT_REPOSITION: u32 = 262144;
pub const WT_CURSTD_HS_READ_ACROSS_BTREE: u32 = 524288;
pub const WT_CURSTD_HS_READ_ALL: u32 = 1048576;
pub const WT_CURSTD_HS_READ_COMMITTED: u32 = 2097152;
pub const WT_CURSTD_IGNORE_TOMBSTONE: u32 = 4194304;
pub const WT_CURSTD_JOINED: u32 = 8388608;
pub const WT_CURSTD_KEY_EXT: u32 = 16777216;
pub const WT_CURSTD_KEY_INT: u32 = 33554432;
pub const WT_CURSTD_KEY_ONLY: u32 = 67108864;
pub const WT_CURSTD_META_INUSE: u32 = 134217728;
pub const WT_CURSTD_OPEN: u32 = 268435456;
pub const WT_CURSTD_OVERWRITE: u32 = 536870912;
pub const WT_CURSTD_RAW: u32 = 1073741824;
pub const WT_CURSTD_RAW_SEARCH: u32 = 2147483648;
pub const WT_CURSTD_VALUE_EXT: u64 = 4294967296;
pub const WT_CURSTD_VALUE_INT: u64 = 8589934592;
pub const WT_CURSTD_VERSION_CURSOR: u64 = 17179869184;
pub const WT_CURSTD_KEY_SET: u32 = 50331648;
pub const WT_CURSTD_VALUE_SET: u64 = 12884901888;
pub const WT_ROLLBACK: i32 = -31800;
pub const WT_DUPLICATE_KEY: i32 = -31801;
pub const WT_ERROR: i32 = -31802;
pub const WT_NOTFOUND: i32 = -31803;
pub const WT_PANIC: i32 = -31804;
pub const WT_RESTART: i32 = -31805;
pub const WT_RUN_RECOVERY: i32 = -31806;
pub const WT_CACHE_FULL: i32 = -31807;
pub const WT_PREPARE_CONFLICT: i32 = -31808;
pub const WT_TRY_SALVAGE: i32 = -31809;
pub const WT_DEADLOCK: i32 = -31800;
pub const WT_FS_OPEN_ACCESS_RAND: u32 = 1;
pub const WT_FS_OPEN_ACCESS_SEQ: u32 = 2;
pub const WT_FS_OPEN_CREATE: u32 = 4;
pub const WT_FS_OPEN_DIRECTIO: u32 = 8;
pub const WT_FS_OPEN_DURABLE: u32 = 16;
pub const WT_FS_OPEN_EXCLUSIVE: u32 = 32;
pub const WT_FS_OPEN_FIXED: u32 = 64;
pub const WT_FS_OPEN_FORCE_MMAP: u32 = 128;
pub const WT_FS_OPEN_READONLY: u32 = 256;
pub const WT_FS_DURABLE: u32 = 1;
pub const WT_FILE_HANDLE_DONTNEED: u32 = 1;
pub const WT_FILE_HANDLE_WILLNEED: u32 = 2;
pub const WT_BACKUP_INVALID: u32 = 0;
pub const WT_BACKUP_FILE: u32 = 1;
pub const WT_BACKUP_RANGE: u32 = 2;
pub const WT_LOGREC_CHECKPOINT: u32 = 0;
pub const WT_LOGREC_COMMIT: u32 = 1;
pub const WT_LOGREC_FILE_SYNC: u32 = 2;
pub const WT_LOGREC_MESSAGE: u32 = 3;
pub const WT_LOGREC_SYSTEM: u32 = 4;
pub const WT_LOGOP_INVALID: u32 = 0;
pub const WT_LOGOP_COL_PUT: u32 = 1;
pub const WT_LOGOP_COL_REMOVE: u32 = 2;
pub const WT_LOGOP_COL_TRUNCATE: u32 = 3;
pub const WT_LOGOP_ROW_PUT: u32 = 4;
pub const WT_LOGOP_ROW_REMOVE: u32 = 5;
pub const WT_LOGOP_ROW_TRUNCATE: u32 = 6;
pub const WT_LOGOP_CHECKPOINT_START: u32 = 7;
pub const WT_LOGOP_PREV_LSN: u32 = 8;
pub const WT_LOGOP_COL_MODIFY: u32 = 9;
pub const WT_LOGOP_ROW_MODIFY: u32 = 10;
pub const WT_LOGOP_BACKUP_ID: u32 = 12;
pub const WT_STAT_CONN_LSM_WORK_QUEUE_APP: u32 = 1000;
pub const WT_STAT_CONN_LSM_WORK_QUEUE_MANAGER: u32 = 1001;
pub const WT_STAT_CONN_LSM_ROWS_MERGED: u32 = 1002;
pub const WT_STAT_CONN_LSM_CHECKPOINT_THROTTLE: u32 = 1003;
pub const WT_STAT_CONN_LSM_MERGE_THROTTLE: u32 = 1004;
pub const WT_STAT_CONN_LSM_WORK_QUEUE_SWITCH: u32 = 1005;
pub const WT_STAT_CONN_LSM_WORK_UNITS_DISCARDED: u32 = 1006;
pub const WT_STAT_CONN_LSM_WORK_UNITS_DONE: u32 = 1007;
pub const WT_STAT_CONN_LSM_WORK_UNITS_CREATED: u32 = 1008;
pub const WT_STAT_CONN_LSM_WORK_QUEUE_MAX: u32 = 1009;
pub const WT_STAT_CONN_AUTOCOMMIT_READONLY_RETRY: u32 = 1010;
pub const WT_STAT_CONN_AUTOCOMMIT_UPDATE_RETRY: u32 = 1011;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_FAIL: u32 = 1012;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_FAIL_CACHE_PRESSURE: u32 = 1013;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_INTERRUPTED: u32 = 1014;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_EMA: u32 = 1015;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_BYTES_RECOVERED: u32 = 1016;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_RUNNING: u32 = 1017;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_EXCLUDE: u32 = 1018;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_SKIPPED: u32 = 1019;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_SLEEP_CACHE_PRESSURE: u32 = 1020;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_SUCCESS: u32 = 1021;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_TIMEOUT: u32 = 1022;
pub const WT_STAT_CONN_BACKGROUND_COMPACT_FILES_TRACKED: u32 = 1023;
pub const WT_STAT_CONN_BACKUP_CURSOR_OPEN: u32 = 1024;
pub const WT_STAT_CONN_BACKUP_DUP_OPEN: u32 = 1025;
pub const WT_STAT_CONN_BACKUP_GRANULARITY: u32 = 1026;
pub const WT_STAT_CONN_BACKUP_INCREMENTAL: u32 = 1027;
pub const WT_STAT_CONN_BACKUP_START: u32 = 1028;
pub const WT_STAT_CONN_BACKUP_BLOCKS: u32 = 1029;
pub const WT_STAT_CONN_BACKUP_BLOCKS_COMPRESSED: u32 = 1030;
pub const WT_STAT_CONN_BACKUP_BLOCKS_UNCOMPRESSED: u32 = 1031;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS_UPDATE: u32 = 1032;
pub const WT_STAT_CONN_BLOCK_CACHE_BYTES_UPDATE: u32 = 1033;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS_EVICTED: u32 = 1034;
pub const WT_STAT_CONN_BLOCK_CACHE_BYPASS_FILESIZE: u32 = 1035;
pub const WT_STAT_CONN_BLOCK_CACHE_LOOKUPS: u32 = 1036;
pub const WT_STAT_CONN_BLOCK_CACHE_NOT_EVICTED_OVERHEAD: u32 = 1037;
pub const WT_STAT_CONN_BLOCK_CACHE_BYPASS_WRITEALLOC: u32 = 1038;
pub const WT_STAT_CONN_BLOCK_CACHE_BYPASS_OVERHEAD_PUT: u32 = 1039;
pub const WT_STAT_CONN_BLOCK_CACHE_BYPASS_GET: u32 = 1040;
pub const WT_STAT_CONN_BLOCK_CACHE_BYPASS_PUT: u32 = 1041;
pub const WT_STAT_CONN_BLOCK_CACHE_EVICTION_PASSES: u32 = 1042;
pub const WT_STAT_CONN_BLOCK_CACHE_HITS: u32 = 1043;
pub const WT_STAT_CONN_BLOCK_CACHE_MISSES: u32 = 1044;
pub const WT_STAT_CONN_BLOCK_CACHE_BYPASS_CHKPT: u32 = 1045;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS_REMOVED: u32 = 1046;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS_REMOVED_BLOCKED: u32 = 1047;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS: u32 = 1048;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS_INSERT_READ: u32 = 1049;
pub const WT_STAT_CONN_BLOCK_CACHE_BLOCKS_INSERT_WRITE: u32 = 1050;
pub const WT_STAT_CONN_BLOCK_CACHE_BYTES: u32 = 1051;
pub const WT_STAT_CONN_BLOCK_CACHE_BYTES_INSERT_READ: u32 = 1052;
pub const WT_STAT_CONN_BLOCK_CACHE_BYTES_INSERT_WRITE: u32 = 1053;
pub const WT_STAT_CONN_BLOCK_PRELOAD: u32 = 1054;
pub const WT_STAT_CONN_BLOCK_READ: u32 = 1055;
pub const WT_STAT_CONN_BLOCK_WRITE: u32 = 1056;
pub const WT_STAT_CONN_BLOCK_BYTE_READ: u32 = 1057;
pub const WT_STAT_CONN_BLOCK_BYTE_READ_MMAP: u32 = 1058;
pub const WT_STAT_CONN_BLOCK_BYTE_READ_SYSCALL: u32 = 1059;
pub const WT_STAT_CONN_BLOCK_BYTE_WRITE: u32 = 1060;
pub const WT_STAT_CONN_BLOCK_BYTE_WRITE_COMPACT: u32 = 1061;
pub const WT_STAT_CONN_BLOCK_BYTE_WRITE_CHECKPOINT: u32 = 1062;
pub const WT_STAT_CONN_BLOCK_BYTE_WRITE_MMAP: u32 = 1063;
pub const WT_STAT_CONN_BLOCK_BYTE_WRITE_SYSCALL: u32 = 1064;
pub const WT_STAT_CONN_BLOCK_MAP_READ: u32 = 1065;
pub const WT_STAT_CONN_BLOCK_BYTE_MAP_READ: u32 = 1066;
pub const WT_STAT_CONN_BLOCK_REMAP_FILE_RESIZE: u32 = 1067;
pub const WT_STAT_CONN_BLOCK_REMAP_FILE_WRITE: u32 = 1068;
pub const WT_STAT_CONN_CACHE_EVICTION_APP_TIME: u32 = 1069;
pub const WT_STAT_CONN_CACHE_READ_APP_COUNT: u32 = 1070;
pub const WT_STAT_CONN_CACHE_READ_APP_TIME: u32 = 1071;
pub const WT_STAT_CONN_CACHE_WRITE_APP_COUNT: u32 = 1072;
pub const WT_STAT_CONN_CACHE_WRITE_APP_TIME: u32 = 1073;
pub const WT_STAT_CONN_CACHE_BYTES_UPDATES: u32 = 1074;
pub const WT_STAT_CONN_CACHE_BYTES_IMAGE: u32 = 1075;
pub const WT_STAT_CONN_CACHE_BYTES_HS: u32 = 1076;
pub const WT_STAT_CONN_CACHE_BYTES_INUSE: u32 = 1077;
pub const WT_STAT_CONN_CACHE_BYTES_DIRTY_TOTAL: u32 = 1078;
pub const WT_STAT_CONN_CACHE_BYTES_OTHER: u32 = 1079;
pub const WT_STAT_CONN_CACHE_BYTES_READ: u32 = 1080;
pub const WT_STAT_CONN_CACHE_BYTES_WRITE: u32 = 1081;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_CHECKPOINT: u32 = 1082;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_CHECKPOINT_HS: u32 = 1083;
pub const WT_STAT_CONN_CACHE_EVICTION_GET_REF: u32 = 1084;
pub const WT_STAT_CONN_CACHE_EVICTION_GET_REF_EMPTY: u32 = 1085;
pub const WT_STAT_CONN_CACHE_EVICTION_GET_REF_EMPTY2: u32 = 1086;
pub const WT_STAT_CONN_CACHE_EVICTION_AGGRESSIVE_SET: u32 = 1087;
pub const WT_STAT_CONN_CACHE_EVICTION_EMPTY_SCORE: u32 = 1088;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_1: u32 = 1089;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_2: u32 = 1090;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_3: u32 = 1091;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_4: u32 = 1092;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_REMOVE_HS_RACE_WITH_CHECKPOINT: u32 = 1093;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_NO_PROGRESS: u32 = 1094;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_PASSES: u32 = 1095;
pub const WT_STAT_CONN_CACHE_EVICTION_QUEUE_EMPTY: u32 = 1096;
pub const WT_STAT_CONN_CACHE_EVICTION_QUEUE_NOT_EMPTY: u32 = 1097;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_EVICTING: u32 = 1098;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_DIRTY_PAGES_DURING_CHECKPOINT: u32 = 1099;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_INTL_PAGE_WITH_ACTIVE_CHILD: u32 = 1100;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_METATDATA_WITH_HISTORY: u32 = 1101;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_PAGES_LAST_RUNNING: u32 = 1102;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_PAGES_RETRY: u32 = 1103;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_UNWANTED_PAGES: u32 = 1104;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_UNWANTED_TREE: u32 = 1105;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_TREES_TOO_MANY_ACTIVE_WALKS: u32 = 1106;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_CHECKPOINTING_TREES: u32 = 1107;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_TREES_STICK_IN_CACHE: u32 = 1108;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_TREES_EVICTION_DISABLED: u32 = 1109;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SKIP_TREES_NOT_USEFUL_BEFORE: u32 = 1110;
pub const WT_STAT_CONN_CACHE_EVICTION_SERVER_SLEPT: u32 = 1111;
pub const WT_STAT_CONN_CACHE_EVICTION_SLOW: u32 = 1112;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_LEAF_NOTFOUND: u32 = 1113;
pub const WT_STAT_CONN_CACHE_EVICTION_STATE: u32 = 1114;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_SLEEPS: u32 = 1115;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_PAGE_LT10: u32 = 1116;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_PAGE_LT32: u32 = 1117;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_PAGE_GE128: u32 = 1118;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_PAGE_LT64: u32 = 1119;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_PAGE_LT128: u32 = 1120;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_PAGE_REDUCED: u32 = 1121;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_STRATEGY_BOTH_CLEAN_AND_DIRTY: u32 = 1122;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_STRATEGY_CLEAN: u32 = 1123;
pub const WT_STAT_CONN_CACHE_EVICTION_TARGET_STRATEGY_DIRTY: u32 = 1124;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_ABANDONED: u32 = 1125;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_STOPPED: u32 = 1126;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_GAVE_UP_NO_TARGETS: u32 = 1127;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_GAVE_UP_RATIO: u32 = 1128;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_RANDOM_RETURNS_NULL_POSITION: u32 = 1129;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_ENDED: u32 = 1130;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_RESTART: u32 = 1131;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_FROM_ROOT: u32 = 1132;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK_SAVED_POS: u32 = 1133;
pub const WT_STAT_CONN_CACHE_EVICTION_ACTIVE_WORKERS: u32 = 1134;
pub const WT_STAT_CONN_CACHE_EVICTION_WORKER_CREATED: u32 = 1135;
pub const WT_STAT_CONN_CACHE_EVICTION_WORKER_EVICTING: u32 = 1136;
pub const WT_STAT_CONN_CACHE_EVICTION_WORKER_REMOVED: u32 = 1137;
pub const WT_STAT_CONN_CACHE_EVICTION_STABLE_STATE_WORKERS: u32 = 1138;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_ACTIVE: u32 = 1139;
pub const WT_STAT_CONN_CACHE_EVICTION_WALKS_STARTED: u32 = 1140;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_RETUNE: u32 = 1141;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_NO_RETRY: u32 = 1142;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_HS_FAIL: u32 = 1143;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_HS: u32 = 1144;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_HS_SUCCESS: u32 = 1145;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_CLEAN: u32 = 1146;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_CLEAN_TIME: u32 = 1147;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_DIRTY: u32 = 1148;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_DIRTY_TIME: u32 = 1149;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_LONG_UPDATE_LIST: u32 = 1150;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_DELETE: u32 = 1151;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE: u32 = 1152;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_FAIL: u32 = 1153;
pub const WT_STAT_CONN_CACHE_EVICTION_FORCE_FAIL_TIME: u32 = 1154;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_HAZARD: u32 = 1155;
pub const WT_STAT_CONN_CACHE_HAZARD_CHECKS: u32 = 1156;
pub const WT_STAT_CONN_CACHE_HAZARD_WALKS: u32 = 1157;
pub const WT_STAT_CONN_CACHE_HAZARD_MAX: u32 = 1158;
pub const WT_STAT_CONN_CACHE_HS_INSERT: u32 = 1159;
pub const WT_STAT_CONN_CACHE_HS_INSERT_RESTART: u32 = 1160;
pub const WT_STAT_CONN_CACHE_HS_ONDISK_MAX: u32 = 1161;
pub const WT_STAT_CONN_CACHE_HS_ONDISK: u32 = 1162;
pub const WT_STAT_CONN_CACHE_HS_READ: u32 = 1163;
pub const WT_STAT_CONN_CACHE_HS_READ_MISS: u32 = 1164;
pub const WT_STAT_CONN_CACHE_HS_READ_SQUASH: u32 = 1165;
pub const WT_STAT_CONN_CACHE_HS_ORDER_LOSE_DURABLE_TIMESTAMP: u32 = 1166;
pub const WT_STAT_CONN_CACHE_HS_KEY_TRUNCATE_RTS_UNSTABLE: u32 = 1167;
pub const WT_STAT_CONN_CACHE_HS_KEY_TRUNCATE_RTS: u32 = 1168;
pub const WT_STAT_CONN_CACHE_HS_BTREE_TRUNCATE: u32 = 1169;
pub const WT_STAT_CONN_CACHE_HS_KEY_TRUNCATE: u32 = 1170;
pub const WT_STAT_CONN_CACHE_HS_ORDER_REMOVE: u32 = 1171;
pub const WT_STAT_CONN_CACHE_HS_KEY_TRUNCATE_ONPAGE_REMOVAL: u32 = 1172;
pub const WT_STAT_CONN_CACHE_HS_BTREE_TRUNCATE_DRYRUN: u32 = 1173;
pub const WT_STAT_CONN_CACHE_HS_KEY_TRUNCATE_RTS_UNSTABLE_DRYRUN: u32 = 1174;
pub const WT_STAT_CONN_CACHE_HS_KEY_TRUNCATE_RTS_DRYRUN: u32 = 1175;
pub const WT_STAT_CONN_CACHE_HS_ORDER_REINSERT: u32 = 1176;
pub const WT_STAT_CONN_CACHE_HS_WRITE_SQUASH: u32 = 1177;
pub const WT_STAT_CONN_CACHE_INMEM_SPLITTABLE: u32 = 1178;
pub const WT_STAT_CONN_CACHE_INMEM_SPLIT: u32 = 1179;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_INTERNAL_PAGE_SPLIT: u32 = 1180;
pub const WT_STAT_CONN_CACHE_EVICTION_INTERNAL: u32 = 1181;
pub const WT_STAT_CONN_CACHE_EVICTION_INTERNAL_PAGES_QUEUED: u32 = 1182;
pub const WT_STAT_CONN_CACHE_EVICTION_INTERNAL_PAGES_SEEN: u32 = 1183;
pub const WT_STAT_CONN_CACHE_EVICTION_INTERNAL_PAGES_ALREADY_QUEUED: u32 = 1184;
pub const WT_STAT_CONN_CACHE_EVICTION_SPLIT_INTERNAL: u32 = 1185;
pub const WT_STAT_CONN_CACHE_EVICTION_SPLIT_LEAF: u32 = 1186;
pub const WT_STAT_CONN_CACHE_EVICTION_RANDOM_SAMPLE_INMEM_ROOT: u32 = 1187;
pub const WT_STAT_CONN_CACHE_BYTES_MAX: u32 = 1188;
pub const WT_STAT_CONN_CACHE_EVICTION_MAXIMUM_MILLISECONDS: u32 = 1189;
pub const WT_STAT_CONN_CACHE_EVICTION_MAXIMUM_PAGE_SIZE: u32 = 1190;
pub const WT_STAT_CONN_CACHE_EVICTION_DIRTY: u32 = 1191;
pub const WT_STAT_CONN_CACHE_EVICTION_APP_DIRTY: u32 = 1192;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_MULTI_BLOCK_RECONCILATION_DURING_CHECKPOINT: u32 =
  1193;
pub const WT_STAT_CONN_CACHE_TIMED_OUT_OPS: u32 = 1194;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_OVERFLOW_KEYS: u32 = 1195;
pub const WT_STAT_CONN_CACHE_READ_OVERFLOW: u32 = 1196;
pub const WT_STAT_CONN_CACHE_EVICTION_DEEPEN: u32 = 1197;
pub const WT_STAT_CONN_CACHE_WRITE_HS: u32 = 1198;
pub const WT_STAT_CONN_CACHE_EVICTION_CONSIDER_PREFETCH: u32 = 1199;
pub const WT_STAT_CONN_CACHE_PAGES_INUSE: u32 = 1200;
pub const WT_STAT_CONN_CACHE_EVICTION_DIRTY_OBSOLETE_TW: u32 = 1201;
pub const WT_STAT_CONN_CACHE_EVICTION_APP: u32 = 1202;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_IN_PARALLEL_WITH_CHECKPOINT: u32 = 1203;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_QUEUED: u32 = 1204;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_QUEUED_POST_LRU: u32 = 1205;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_QUEUED_URGENT: u32 = 1206;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_QUEUED_OLDEST: u32 = 1207;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_QUEUED_URGENT_HS_DIRTY: u32 = 1208;
pub const WT_STAT_CONN_CACHE_READ: u32 = 1209;
pub const WT_STAT_CONN_CACHE_READ_DELETED: u32 = 1210;
pub const WT_STAT_CONN_CACHE_READ_DELETED_PREPARED: u32 = 1211;
pub const WT_STAT_CONN_CACHE_READ_CHECKPOINT: u32 = 1212;
pub const WT_STAT_CONN_CACHE_EVICTION_CLEAR_ORDINARY: u32 = 1213;
pub const WT_STAT_CONN_CACHE_PAGES_REQUESTED: u32 = 1214;
pub const WT_STAT_CONN_CACHE_PAGES_PREFETCH: u32 = 1215;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_SEEN: u32 = 1216;
pub const WT_STAT_CONN_CACHE_EVICTION_PAGES_ALREADY_QUEUED: u32 = 1217;
pub const WT_STAT_CONN_CACHE_EVICTION_FAIL: u32 = 1218;
pub const WT_STAT_CONN_CACHE_EVICTION_FAIL_ACTIVE_CHILDREN_ON_AN_INTERNAL_PAGE: u32 = 1219;
pub const WT_STAT_CONN_CACHE_EVICTION_FAIL_IN_RECONCILIATION: u32 = 1220;
pub const WT_STAT_CONN_CACHE_EVICTION_FAIL_CHECKPOINT_NO_TS: u32 = 1221;
pub const WT_STAT_CONN_CACHE_EVICTION_WALK: u32 = 1222;
pub const WT_STAT_CONN_CACHE_WRITE: u32 = 1223;
pub const WT_STAT_CONN_CACHE_WRITE_RESTORE: u32 = 1224;
pub const WT_STAT_CONN_CACHE_OVERHEAD: u32 = 1225;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_RECENTLY_MODIFIED: u32 = 1226;
pub const WT_STAT_CONN_CACHE_REVERSE_SPLITS: u32 = 1227;
pub const WT_STAT_CONN_CACHE_REVERSE_SPLITS_SKIPPED_VLCS: u32 = 1228;
pub const WT_STAT_CONN_CACHE_HS_INSERT_FULL_UPDATE: u32 = 1229;
pub const WT_STAT_CONN_CACHE_HS_INSERT_REVERSE_MODIFY: u32 = 1230;
pub const WT_STAT_CONN_CACHE_REENTRY_HS_EVICTION_MILLISECONDS: u32 = 1231;
pub const WT_STAT_CONN_CACHE_BYTES_INTERNAL: u32 = 1232;
pub const WT_STAT_CONN_CACHE_BYTES_LEAF: u32 = 1233;
pub const WT_STAT_CONN_CACHE_BYTES_DIRTY: u32 = 1234;
pub const WT_STAT_CONN_CACHE_PAGES_DIRTY: u32 = 1235;
pub const WT_STAT_CONN_CACHE_EVICTION_BLOCKED_UNCOMMITTED_TRUNCATE: u32 = 1236;
pub const WT_STAT_CONN_CACHE_EVICTION_CLEAN: u32 = 1237;
pub const WT_STAT_CONN_FSYNC_ALL_FH_TOTAL: u32 = 1238;
pub const WT_STAT_CONN_FSYNC_ALL_FH: u32 = 1239;
pub const WT_STAT_CONN_FSYNC_ALL_TIME: u32 = 1240;
pub const WT_STAT_CONN_CAPACITY_BYTES_READ: u32 = 1241;
pub const WT_STAT_CONN_CAPACITY_BYTES_CKPT: u32 = 1242;
pub const WT_STAT_CONN_CAPACITY_BYTES_CHUNKCACHE: u32 = 1243;
pub const WT_STAT_CONN_CAPACITY_BYTES_EVICT: u32 = 1244;
pub const WT_STAT_CONN_CAPACITY_BYTES_LOG: u32 = 1245;
pub const WT_STAT_CONN_CAPACITY_BYTES_WRITTEN: u32 = 1246;
pub const WT_STAT_CONN_CAPACITY_THRESHOLD: u32 = 1247;
pub const WT_STAT_CONN_CAPACITY_TIME_TOTAL: u32 = 1248;
pub const WT_STAT_CONN_CAPACITY_TIME_CKPT: u32 = 1249;
pub const WT_STAT_CONN_CAPACITY_TIME_EVICT: u32 = 1250;
pub const WT_STAT_CONN_CAPACITY_TIME_LOG: u32 = 1251;
pub const WT_STAT_CONN_CAPACITY_TIME_READ: u32 = 1252;
pub const WT_STAT_CONN_CAPACITY_TIME_CHUNKCACHE: u32 = 1253;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_SUCCESS: u32 = 1254;
pub const WT_STAT_CONN_CHECKPOINT_SNAPSHOT_ACQUIRED: u32 = 1255;
pub const WT_STAT_CONN_CHECKPOINT_SKIPPED: u32 = 1256;
pub const WT_STAT_CONN_CHECKPOINT_FSYNC_POST: u32 = 1257;
pub const WT_STAT_CONN_CHECKPOINT_FSYNC_POST_DURATION: u32 = 1258;
pub const WT_STAT_CONN_CHECKPOINT_GENERATION: u32 = 1259;
pub const WT_STAT_CONN_CHECKPOINT_TIME_MAX: u32 = 1260;
pub const WT_STAT_CONN_CHECKPOINT_TIME_MIN: u32 = 1261;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_DROP_DURATION: u32 = 1262;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_DURATION: u32 = 1263;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_APPLY_DURATION: u32 = 1264;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_SKIP_DURATION: u32 = 1265;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_META_CHECK_DURATION: u32 = 1266;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_LOCK_DURATION: u32 = 1267;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_APPLIED: u32 = 1268;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_DROPPED: u32 = 1269;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_META_CHECKED: u32 = 1270;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_LOCKED: u32 = 1271;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_SKIPPED: u32 = 1272;
pub const WT_STAT_CONN_CHECKPOINT_HANDLE_WALKED: u32 = 1273;
pub const WT_STAT_CONN_CHECKPOINT_TIME_RECENT: u32 = 1274;
pub const WT_STAT_CONN_CHECKPOINTS_API: u32 = 1275;
pub const WT_STAT_CONN_CHECKPOINTS_COMPACT: u32 = 1276;
pub const WT_STAT_CONN_CHECKPOINT_SYNC: u32 = 1277;
pub const WT_STAT_CONN_CHECKPOINT_PRESYNC: u32 = 1278;
pub const WT_STAT_CONN_CHECKPOINT_HS_PAGES_RECONCILED: u32 = 1279;
pub const WT_STAT_CONN_CHECKPOINT_PAGES_VISITED_INTERNAL: u32 = 1280;
pub const WT_STAT_CONN_CHECKPOINT_PAGES_VISITED_LEAF: u32 = 1281;
pub const WT_STAT_CONN_CHECKPOINT_PAGES_RECONCILED: u32 = 1282;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_EVICT: u32 = 1283;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_OBSOLETE_TW: u32 = 1284;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_READ_RECLAIM_SPACE: u32 = 1285;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_READ_OBSOLETE_TW: u32 = 1286;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_REMOVED: u32 = 1287;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_WALK_SKIPPED: u32 = 1288;
pub const WT_STAT_CONN_CHECKPOINT_CLEANUP_PAGES_VISITED: u32 = 1289;
pub const WT_STAT_CONN_CHECKPOINT_PREP_RUNNING: u32 = 1290;
pub const WT_STAT_CONN_CHECKPOINT_PREP_MAX: u32 = 1291;
pub const WT_STAT_CONN_CHECKPOINT_PREP_MIN: u32 = 1292;
pub const WT_STAT_CONN_CHECKPOINT_PREP_RECENT: u32 = 1293;
pub const WT_STAT_CONN_CHECKPOINT_PREP_TOTAL: u32 = 1294;
pub const WT_STAT_CONN_CHECKPOINT_STATE: u32 = 1295;
pub const WT_STAT_CONN_CHECKPOINT_SCRUB_TARGET: u32 = 1296;
pub const WT_STAT_CONN_CHECKPOINT_SCRUB_MAX: u32 = 1297;
pub const WT_STAT_CONN_CHECKPOINT_SCRUB_MIN: u32 = 1298;
pub const WT_STAT_CONN_CHECKPOINT_SCRUB_RECENT: u32 = 1299;
pub const WT_STAT_CONN_CHECKPOINT_SCRUB_TOTAL: u32 = 1300;
pub const WT_STAT_CONN_CHECKPOINT_STOP_STRESS_ACTIVE: u32 = 1301;
pub const WT_STAT_CONN_CHECKPOINT_TREE_DURATION: u32 = 1302;
pub const WT_STAT_CONN_CHECKPOINTS_TOTAL_FAILED: u32 = 1303;
pub const WT_STAT_CONN_CHECKPOINTS_TOTAL_SUCCEED: u32 = 1304;
pub const WT_STAT_CONN_CHECKPOINT_TIME_TOTAL: u32 = 1305;
pub const WT_STAT_CONN_CHECKPOINT_OBSOLETE_APPLIED: u32 = 1306;
pub const WT_STAT_CONN_CHECKPOINT_WAIT_REDUCE_DIRTY: u32 = 1307;
pub const WT_STAT_CONN_CHUNKCACHE_SPANS_CHUNKS_READ: u32 = 1308;
pub const WT_STAT_CONN_CHUNKCACHE_CHUNKS_EVICTED: u32 = 1309;
pub const WT_STAT_CONN_CHUNKCACHE_EXCEEDED_BITMAP_CAPACITY: u32 = 1310;
pub const WT_STAT_CONN_CHUNKCACHE_EXCEEDED_CAPACITY: u32 = 1311;
pub const WT_STAT_CONN_CHUNKCACHE_LOOKUPS: u32 = 1312;
pub const WT_STAT_CONN_CHUNKCACHE_CHUNKS_LOADED_FROM_FLUSHED_TABLES: u32 = 1313;
pub const WT_STAT_CONN_CHUNKCACHE_METADATA_INSERTED: u32 = 1314;
pub const WT_STAT_CONN_CHUNKCACHE_METADATA_REMOVED: u32 = 1315;
pub const WT_STAT_CONN_CHUNKCACHE_METADATA_WORK_UNITS_DROPPED: u32 = 1316;
pub const WT_STAT_CONN_CHUNKCACHE_METADATA_WORK_UNITS_CREATED: u32 = 1317;
pub const WT_STAT_CONN_CHUNKCACHE_METADATA_WORK_UNITS_DEQUEUED: u32 = 1318;
pub const WT_STAT_CONN_CHUNKCACHE_MISSES: u32 = 1319;
pub const WT_STAT_CONN_CHUNKCACHE_IO_FAILED: u32 = 1320;
pub const WT_STAT_CONN_CHUNKCACHE_RETRIES: u32 = 1321;
pub const WT_STAT_CONN_CHUNKCACHE_RETRIES_CHECKSUM_MISMATCH: u32 = 1322;
pub const WT_STAT_CONN_CHUNKCACHE_TOOMANY_RETRIES: u32 = 1323;
pub const WT_STAT_CONN_CHUNKCACHE_BYTES_READ_PERSISTENT: u32 = 1324;
pub const WT_STAT_CONN_CHUNKCACHE_BYTES_INUSE: u32 = 1325;
pub const WT_STAT_CONN_CHUNKCACHE_BYTES_INUSE_PINNED: u32 = 1326;
pub const WT_STAT_CONN_CHUNKCACHE_CHUNKS_INUSE: u32 = 1327;
pub const WT_STAT_CONN_CHUNKCACHE_CREATED_FROM_METADATA: u32 = 1328;
pub const WT_STAT_CONN_CHUNKCACHE_CHUNKS_PINNED: u32 = 1329;
pub const WT_STAT_CONN_COND_AUTO_WAIT_RESET: u32 = 1330;
pub const WT_STAT_CONN_COND_AUTO_WAIT: u32 = 1331;
pub const WT_STAT_CONN_COND_AUTO_WAIT_SKIPPED: u32 = 1332;
pub const WT_STAT_CONN_TIME_TRAVEL: u32 = 1333;
pub const WT_STAT_CONN_FILE_OPEN: u32 = 1334;
pub const WT_STAT_CONN_BUCKETS_DH: u32 = 1335;
pub const WT_STAT_CONN_BUCKETS: u32 = 1336;
pub const WT_STAT_CONN_MEMORY_ALLOCATION: u32 = 1337;
pub const WT_STAT_CONN_MEMORY_FREE: u32 = 1338;
pub const WT_STAT_CONN_MEMORY_GROW: u32 = 1339;
pub const WT_STAT_CONN_NO_SESSION_SWEEP_5MIN: u32 = 1340;
pub const WT_STAT_CONN_NO_SESSION_SWEEP_60MIN: u32 = 1341;
pub const WT_STAT_CONN_COND_WAIT: u32 = 1342;
pub const WT_STAT_CONN_RWLOCK_READ: u32 = 1343;
pub const WT_STAT_CONN_RWLOCK_WRITE: u32 = 1344;
pub const WT_STAT_CONN_FSYNC_IO: u32 = 1345;
pub const WT_STAT_CONN_READ_IO: u32 = 1346;
pub const WT_STAT_CONN_WRITE_IO: u32 = 1347;
pub const WT_STAT_CONN_CURSOR_TREE_WALK_DEL_PAGE_SKIP: u32 = 1348;
pub const WT_STAT_CONN_CURSOR_NEXT_SKIP_TOTAL: u32 = 1349;
pub const WT_STAT_CONN_CURSOR_PREV_SKIP_TOTAL: u32 = 1350;
pub const WT_STAT_CONN_CURSOR_SKIP_HS_CUR_POSITION: u32 = 1351;
pub const WT_STAT_CONN_CURSOR_TREE_WALK_INMEM_DEL_PAGE_SKIP: u32 = 1352;
pub const WT_STAT_CONN_CURSOR_TREE_WALK_ONDISK_DEL_PAGE_SKIP: u32 = 1353;
pub const WT_STAT_CONN_CURSOR_SEARCH_NEAR_PREFIX_FAST_PATHS: u32 = 1354;
pub const WT_STAT_CONN_CURSOR_REPOSITION_FAILED: u32 = 1355;
pub const WT_STAT_CONN_CURSOR_REPOSITION: u32 = 1356;
pub const WT_STAT_CONN_CURSOR_BULK_COUNT: u32 = 1357;
pub const WT_STAT_CONN_CURSOR_CACHED_COUNT: u32 = 1358;
pub const WT_STAT_CONN_CURSOR_BOUND_ERROR: u32 = 1359;
pub const WT_STAT_CONN_CURSOR_BOUNDS_RESET: u32 = 1360;
pub const WT_STAT_CONN_CURSOR_BOUNDS_COMPARISONS: u32 = 1361;
pub const WT_STAT_CONN_CURSOR_BOUNDS_NEXT_UNPOSITIONED: u32 = 1362;
pub const WT_STAT_CONN_CURSOR_BOUNDS_NEXT_EARLY_EXIT: u32 = 1363;
pub const WT_STAT_CONN_CURSOR_BOUNDS_PREV_UNPOSITIONED: u32 = 1364;
pub const WT_STAT_CONN_CURSOR_BOUNDS_PREV_EARLY_EXIT: u32 = 1365;
pub const WT_STAT_CONN_CURSOR_BOUNDS_SEARCH_EARLY_EXIT: u32 = 1366;
pub const WT_STAT_CONN_CURSOR_BOUNDS_SEARCH_NEAR_REPOSITIONED_CURSOR: u32 = 1367;
pub const WT_STAT_CONN_CURSOR_INSERT_BULK: u32 = 1368;
pub const WT_STAT_CONN_CURSOR_CACHE_ERROR: u32 = 1369;
pub const WT_STAT_CONN_CURSOR_CACHE: u32 = 1370;
pub const WT_STAT_CONN_CURSOR_CLOSE_ERROR: u32 = 1371;
pub const WT_STAT_CONN_CURSOR_COMPARE_ERROR: u32 = 1372;
pub const WT_STAT_CONN_CURSOR_CREATE: u32 = 1373;
pub const WT_STAT_CONN_CURSOR_EQUALS_ERROR: u32 = 1374;
pub const WT_STAT_CONN_CURSOR_GET_KEY_ERROR: u32 = 1375;
pub const WT_STAT_CONN_CURSOR_GET_VALUE_ERROR: u32 = 1376;
pub const WT_STAT_CONN_CURSOR_INSERT: u32 = 1377;
pub const WT_STAT_CONN_CURSOR_INSERT_ERROR: u32 = 1378;
pub const WT_STAT_CONN_CURSOR_INSERT_CHECK_ERROR: u32 = 1379;
pub const WT_STAT_CONN_CURSOR_INSERT_BYTES: u32 = 1380;
pub const WT_STAT_CONN_CURSOR_LARGEST_KEY_ERROR: u32 = 1381;
pub const WT_STAT_CONN_CURSOR_MODIFY: u32 = 1382;
pub const WT_STAT_CONN_CURSOR_MODIFY_ERROR: u32 = 1383;
pub const WT_STAT_CONN_CURSOR_MODIFY_BYTES: u32 = 1384;
pub const WT_STAT_CONN_CURSOR_MODIFY_BYTES_TOUCH: u32 = 1385;
pub const WT_STAT_CONN_CURSOR_NEXT: u32 = 1386;
pub const WT_STAT_CONN_CURSOR_NEXT_ERROR: u32 = 1387;
pub const WT_STAT_CONN_CURSOR_NEXT_HS_TOMBSTONE: u32 = 1388;
pub const WT_STAT_CONN_CURSOR_NEXT_SKIP_LT_100: u32 = 1389;
pub const WT_STAT_CONN_CURSOR_NEXT_SKIP_GE_100: u32 = 1390;
pub const WT_STAT_CONN_CURSOR_NEXT_RANDOM_ERROR: u32 = 1391;
pub const WT_STAT_CONN_CURSOR_RESTART: u32 = 1392;
pub const WT_STAT_CONN_CURSOR_PREV: u32 = 1393;
pub const WT_STAT_CONN_CURSOR_PREV_ERROR: u32 = 1394;
pub const WT_STAT_CONN_CURSOR_PREV_HS_TOMBSTONE: u32 = 1395;
pub const WT_STAT_CONN_CURSOR_PREV_SKIP_GE_100: u32 = 1396;
pub const WT_STAT_CONN_CURSOR_PREV_SKIP_LT_100: u32 = 1397;
pub const WT_STAT_CONN_CURSOR_RECONFIGURE_ERROR: u32 = 1398;
pub const WT_STAT_CONN_CURSOR_REMOVE: u32 = 1399;
pub const WT_STAT_CONN_CURSOR_REMOVE_ERROR: u32 = 1400;
pub const WT_STAT_CONN_CURSOR_REMOVE_BYTES: u32 = 1401;
pub const WT_STAT_CONN_CURSOR_REOPEN_ERROR: u32 = 1402;
pub const WT_STAT_CONN_CURSOR_RESERVE: u32 = 1403;
pub const WT_STAT_CONN_CURSOR_RESERVE_ERROR: u32 = 1404;
pub const WT_STAT_CONN_CURSOR_RESET: u32 = 1405;
pub const WT_STAT_CONN_CURSOR_RESET_ERROR: u32 = 1406;
pub const WT_STAT_CONN_CURSOR_SEARCH: u32 = 1407;
pub const WT_STAT_CONN_CURSOR_SEARCH_ERROR: u32 = 1408;
pub const WT_STAT_CONN_CURSOR_SEARCH_HS: u32 = 1409;
pub const WT_STAT_CONN_CURSOR_SEARCH_NEAR: u32 = 1410;
pub const WT_STAT_CONN_CURSOR_SEARCH_NEAR_ERROR: u32 = 1411;
pub const WT_STAT_CONN_CURSOR_SWEEP_BUCKETS: u32 = 1412;
pub const WT_STAT_CONN_CURSOR_SWEEP_CLOSED: u32 = 1413;
pub const WT_STAT_CONN_CURSOR_SWEEP_EXAMINED: u32 = 1414;
pub const WT_STAT_CONN_CURSOR_SWEEP: u32 = 1415;
pub const WT_STAT_CONN_CURSOR_TRUNCATE: u32 = 1416;
pub const WT_STAT_CONN_CURSOR_TRUNCATE_KEYS_DELETED: u32 = 1417;
pub const WT_STAT_CONN_CURSOR_UPDATE: u32 = 1418;
pub const WT_STAT_CONN_CURSOR_UPDATE_ERROR: u32 = 1419;
pub const WT_STAT_CONN_CURSOR_UPDATE_BYTES: u32 = 1420;
pub const WT_STAT_CONN_CURSOR_UPDATE_BYTES_CHANGED: u32 = 1421;
pub const WT_STAT_CONN_CURSOR_REOPEN: u32 = 1422;
pub const WT_STAT_CONN_CURSOR_OPEN_COUNT: u32 = 1423;
pub const WT_STAT_CONN_DH_CONN_HANDLE_SIZE: u32 = 1424;
pub const WT_STAT_CONN_DH_CONN_HANDLE_COUNT: u32 = 1425;
pub const WT_STAT_CONN_DH_SWEEP_REF: u32 = 1426;
pub const WT_STAT_CONN_DH_SWEEP_CLOSE: u32 = 1427;
pub const WT_STAT_CONN_DH_SWEEP_REMOVE: u32 = 1428;
pub const WT_STAT_CONN_DH_SWEEP_TOD: u32 = 1429;
pub const WT_STAT_CONN_DH_SWEEPS: u32 = 1430;
pub const WT_STAT_CONN_DH_SWEEP_SKIP_CKPT: u32 = 1431;
pub const WT_STAT_CONN_DH_SESSION_HANDLES: u32 = 1432;
pub const WT_STAT_CONN_DH_SESSION_SWEEPS: u32 = 1433;
pub const WT_STAT_CONN_LOCK_CHECKPOINT_COUNT: u32 = 1434;
pub const WT_STAT_CONN_LOCK_CHECKPOINT_WAIT_APPLICATION: u32 = 1435;
pub const WT_STAT_CONN_LOCK_CHECKPOINT_WAIT_INTERNAL: u32 = 1436;
pub const WT_STAT_CONN_LOCK_DHANDLE_WAIT_APPLICATION: u32 = 1437;
pub const WT_STAT_CONN_LOCK_DHANDLE_WAIT_INTERNAL: u32 = 1438;
pub const WT_STAT_CONN_LOCK_DHANDLE_READ_COUNT: u32 = 1439;
pub const WT_STAT_CONN_LOCK_DHANDLE_WRITE_COUNT: u32 = 1440;
pub const WT_STAT_CONN_LOCK_METADATA_COUNT: u32 = 1441;
pub const WT_STAT_CONN_LOCK_METADATA_WAIT_APPLICATION: u32 = 1442;
pub const WT_STAT_CONN_LOCK_METADATA_WAIT_INTERNAL: u32 = 1443;
pub const WT_STAT_CONN_LOCK_SCHEMA_COUNT: u32 = 1444;
pub const WT_STAT_CONN_LOCK_SCHEMA_WAIT_APPLICATION: u32 = 1445;
pub const WT_STAT_CONN_LOCK_SCHEMA_WAIT_INTERNAL: u32 = 1446;
pub const WT_STAT_CONN_LOCK_TABLE_WAIT_APPLICATION: u32 = 1447;
pub const WT_STAT_CONN_LOCK_TABLE_WAIT_INTERNAL: u32 = 1448;
pub const WT_STAT_CONN_LOCK_TABLE_READ_COUNT: u32 = 1449;
pub const WT_STAT_CONN_LOCK_TABLE_WRITE_COUNT: u32 = 1450;
pub const WT_STAT_CONN_LOCK_TXN_GLOBAL_WAIT_APPLICATION: u32 = 1451;
pub const WT_STAT_CONN_LOCK_TXN_GLOBAL_WAIT_INTERNAL: u32 = 1452;
pub const WT_STAT_CONN_LOCK_TXN_GLOBAL_READ_COUNT: u32 = 1453;
pub const WT_STAT_CONN_LOCK_TXN_GLOBAL_WRITE_COUNT: u32 = 1454;
pub const WT_STAT_CONN_LOG_SLOT_SWITCH_BUSY: u32 = 1455;
pub const WT_STAT_CONN_LOG_FORCE_REMOVE_SLEEP: u32 = 1456;
pub const WT_STAT_CONN_LOG_BYTES_PAYLOAD: u32 = 1457;
pub const WT_STAT_CONN_LOG_BYTES_WRITTEN: u32 = 1458;
pub const WT_STAT_CONN_LOG_ZERO_FILLS: u32 = 1459;
pub const WT_STAT_CONN_LOG_FLUSH: u32 = 1460;
pub const WT_STAT_CONN_LOG_FORCE_WRITE: u32 = 1461;
pub const WT_STAT_CONN_LOG_FORCE_WRITE_SKIP: u32 = 1462;
pub const WT_STAT_CONN_LOG_COMPRESS_WRITES: u32 = 1463;
pub const WT_STAT_CONN_LOG_COMPRESS_WRITE_FAILS: u32 = 1464;
pub const WT_STAT_CONN_LOG_COMPRESS_SMALL: u32 = 1465;
pub const WT_STAT_CONN_LOG_RELEASE_WRITE_LSN: u32 = 1466;
pub const WT_STAT_CONN_LOG_SCANS: u32 = 1467;
pub const WT_STAT_CONN_LOG_SCAN_REREADS: u32 = 1468;
pub const WT_STAT_CONN_LOG_WRITE_LSN: u32 = 1469;
pub const WT_STAT_CONN_LOG_WRITE_LSN_SKIP: u32 = 1470;
pub const WT_STAT_CONN_LOG_SYNC: u32 = 1471;
pub const WT_STAT_CONN_LOG_SYNC_DURATION: u32 = 1472;
pub const WT_STAT_CONN_LOG_SYNC_DIR: u32 = 1473;
pub const WT_STAT_CONN_LOG_SYNC_DIR_DURATION: u32 = 1474;
pub const WT_STAT_CONN_LOG_WRITES: u32 = 1475;
pub const WT_STAT_CONN_LOG_SLOT_CONSOLIDATED: u32 = 1476;
pub const WT_STAT_CONN_LOG_MAX_FILESIZE: u32 = 1477;
pub const WT_STAT_CONN_LOG_PREALLOC_MAX: u32 = 1478;
pub const WT_STAT_CONN_LOG_PREALLOC_MISSED: u32 = 1479;
pub const WT_STAT_CONN_LOG_PREALLOC_FILES: u32 = 1480;
pub const WT_STAT_CONN_LOG_PREALLOC_USED: u32 = 1481;
pub const WT_STAT_CONN_LOG_SCAN_RECORDS: u32 = 1482;
pub const WT_STAT_CONN_LOG_SLOT_CLOSE_RACE: u32 = 1483;
pub const WT_STAT_CONN_LOG_SLOT_CLOSE_UNBUF: u32 = 1484;
pub const WT_STAT_CONN_LOG_SLOT_CLOSES: u32 = 1485;
pub const WT_STAT_CONN_LOG_SLOT_RACES: u32 = 1486;
pub const WT_STAT_CONN_LOG_SLOT_YIELD_RACE: u32 = 1487;
pub const WT_STAT_CONN_LOG_SLOT_IMMEDIATE: u32 = 1488;
pub const WT_STAT_CONN_LOG_SLOT_YIELD_CLOSE: u32 = 1489;
pub const WT_STAT_CONN_LOG_SLOT_YIELD_SLEEP: u32 = 1490;
pub const WT_STAT_CONN_LOG_SLOT_YIELD: u32 = 1491;
pub const WT_STAT_CONN_LOG_SLOT_ACTIVE_CLOSED: u32 = 1492;
pub const WT_STAT_CONN_LOG_SLOT_YIELD_DURATION: u32 = 1493;
pub const WT_STAT_CONN_LOG_SLOT_NO_FREE_SLOTS: u32 = 1494;
pub const WT_STAT_CONN_LOG_SLOT_UNBUFFERED: u32 = 1495;
pub const WT_STAT_CONN_LOG_COMPRESS_MEM: u32 = 1496;
pub const WT_STAT_CONN_LOG_BUFFER_SIZE: u32 = 1497;
pub const WT_STAT_CONN_LOG_COMPRESS_LEN: u32 = 1498;
pub const WT_STAT_CONN_LOG_SLOT_COALESCED: u32 = 1499;
pub const WT_STAT_CONN_LOG_CLOSE_YIELDS: u32 = 1500;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_LT10: u32 = 1501;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_LT50: u32 = 1502;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_LT100: u32 = 1503;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_LT250: u32 = 1504;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_LT500: u32 = 1505;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_LT1000: u32 = 1506;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_GT1000: u32 = 1507;
pub const WT_STAT_CONN_PERF_HIST_FSREAD_LATENCY_TOTAL_MSECS: u32 = 1508;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_LT10: u32 = 1509;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_LT50: u32 = 1510;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_LT100: u32 = 1511;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_LT250: u32 = 1512;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_LT500: u32 = 1513;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_LT1000: u32 = 1514;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_GT1000: u32 = 1515;
pub const WT_STAT_CONN_PERF_HIST_FSWRITE_LATENCY_TOTAL_MSECS: u32 = 1516;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_LT100: u32 = 1517;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_LT250: u32 = 1518;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_LT500: u32 = 1519;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_LT1000: u32 = 1520;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_LT10000: u32 = 1521;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_GT10000: u32 = 1522;
pub const WT_STAT_CONN_PERF_HIST_OPREAD_LATENCY_TOTAL_USECS: u32 = 1523;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_LT100: u32 = 1524;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_LT250: u32 = 1525;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_LT500: u32 = 1526;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_LT1000: u32 = 1527;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_LT10000: u32 = 1528;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_GT10000: u32 = 1529;
pub const WT_STAT_CONN_PERF_HIST_OPWRITE_LATENCY_TOTAL_USECS: u32 = 1530;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_INTERNAL_PAGE: u32 = 1531;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_NO_FLAG_SET: u32 = 1532;
pub const WT_STAT_CONN_PREFETCH_FAILED_START: u32 = 1533;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_SAME_REF: u32 = 1534;
pub const WT_STAT_CONN_PREFETCH_DISK_ONE: u32 = 1535;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_NO_VALID_DHANDLE: u32 = 1536;
pub const WT_STAT_CONN_PREFETCH_SKIPPED: u32 = 1537;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_DISK_READ_COUNT: u32 = 1538;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_INTERNAL_SESSION: u32 = 1539;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_SPECIAL_HANDLE: u32 = 1540;
pub const WT_STAT_CONN_PREFETCH_PAGES_FAIL: u32 = 1541;
pub const WT_STAT_CONN_PREFETCH_PAGES_QUEUED: u32 = 1542;
pub const WT_STAT_CONN_PREFETCH_PAGES_READ: u32 = 1543;
pub const WT_STAT_CONN_PREFETCH_SKIPPED_ERROR_OK: u32 = 1544;
pub const WT_STAT_CONN_PREFETCH_ATTEMPTS: u32 = 1545;
pub const WT_STAT_CONN_REC_VLCS_EMPTIED_PAGES: u32 = 1546;
pub const WT_STAT_CONN_REC_TIME_WINDOW_BYTES_TS: u32 = 1547;
pub const WT_STAT_CONN_REC_TIME_WINDOW_BYTES_TXN: u32 = 1548;
pub const WT_STAT_CONN_REC_PAGE_DELETE_FAST: u32 = 1549;
pub const WT_STAT_CONN_REC_OVERFLOW_KEY_LEAF: u32 = 1550;
pub const WT_STAT_CONN_REC_MAXIMUM_MILLISECONDS: u32 = 1551;
pub const WT_STAT_CONN_REC_MAXIMUM_IMAGE_BUILD_MILLISECONDS: u32 = 1552;
pub const WT_STAT_CONN_REC_MAXIMUM_HS_WRAPUP_MILLISECONDS: u32 = 1553;
pub const WT_STAT_CONN_REC_OVERFLOW_VALUE: u32 = 1554;
pub const WT_STAT_CONN_REC_PAGES: u32 = 1555;
pub const WT_STAT_CONN_REC_PAGES_EVICTION: u32 = 1556;
pub const WT_STAT_CONN_REC_PAGES_WITH_PREPARE: u32 = 1557;
pub const WT_STAT_CONN_REC_PAGES_WITH_TS: u32 = 1558;
pub const WT_STAT_CONN_REC_PAGES_WITH_TXN: u32 = 1559;
pub const WT_STAT_CONN_REC_PAGE_DELETE: u32 = 1560;
pub const WT_STAT_CONN_REC_TIME_AGGR_NEWEST_START_DURABLE_TS: u32 = 1561;
pub const WT_STAT_CONN_REC_TIME_AGGR_NEWEST_STOP_DURABLE_TS: u32 = 1562;
pub const WT_STAT_CONN_REC_TIME_AGGR_NEWEST_STOP_TS: u32 = 1563;
pub const WT_STAT_CONN_REC_TIME_AGGR_NEWEST_STOP_TXN: u32 = 1564;
pub const WT_STAT_CONN_REC_TIME_AGGR_NEWEST_TXN: u32 = 1565;
pub const WT_STAT_CONN_REC_TIME_AGGR_OLDEST_START_TS: u32 = 1566;
pub const WT_STAT_CONN_REC_TIME_AGGR_PREPARED: u32 = 1567;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_PREPARED: u32 = 1568;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_DURABLE_START_TS: u32 = 1569;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_START_TS: u32 = 1570;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_START_TXN: u32 = 1571;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_DURABLE_STOP_TS: u32 = 1572;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_STOP_TS: u32 = 1573;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PAGES_STOP_TXN: u32 = 1574;
pub const WT_STAT_CONN_REC_TIME_WINDOW_PREPARED: u32 = 1575;
pub const WT_STAT_CONN_REC_TIME_WINDOW_DURABLE_START_TS: u32 = 1576;
pub const WT_STAT_CONN_REC_TIME_WINDOW_START_TS: u32 = 1577;
pub const WT_STAT_CONN_REC_TIME_WINDOW_START_TXN: u32 = 1578;
pub const WT_STAT_CONN_REC_TIME_WINDOW_DURABLE_STOP_TS: u32 = 1579;
pub const WT_STAT_CONN_REC_TIME_WINDOW_STOP_TS: u32 = 1580;
pub const WT_STAT_CONN_REC_TIME_WINDOW_STOP_TXN: u32 = 1581;
pub const WT_STAT_CONN_REC_SPLIT_STASHED_BYTES: u32 = 1582;
pub const WT_STAT_CONN_REC_SPLIT_STASHED_OBJECTS: u32 = 1583;
pub const WT_STAT_CONN_LOCAL_OBJECTS_INUSE: u32 = 1584;
pub const WT_STAT_CONN_FLUSH_TIER_FAIL: u32 = 1585;
pub const WT_STAT_CONN_FLUSH_TIER: u32 = 1586;
pub const WT_STAT_CONN_FLUSH_TIER_SKIPPED: u32 = 1587;
pub const WT_STAT_CONN_FLUSH_TIER_SWITCHED: u32 = 1588;
pub const WT_STAT_CONN_LOCAL_OBJECTS_REMOVED: u32 = 1589;
pub const WT_STAT_CONN_SESSION_OPEN: u32 = 1590;
pub const WT_STAT_CONN_SESSION_QUERY_TS: u32 = 1591;
pub const WT_STAT_CONN_SESSION_TABLE_ALTER_FAIL: u32 = 1592;
pub const WT_STAT_CONN_SESSION_TABLE_ALTER_SUCCESS: u32 = 1593;
pub const WT_STAT_CONN_SESSION_TABLE_ALTER_TRIGGER_CHECKPOINT: u32 = 1594;
pub const WT_STAT_CONN_SESSION_TABLE_ALTER_SKIP: u32 = 1595;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_CONFLICTING_CHECKPOINT: u32 = 1596;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_DHANDLE_SUCCESS: u32 = 1597;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_FAIL: u32 = 1598;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_FAIL_CACHE_PRESSURE: u32 = 1599;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_PASSES: u32 = 1600;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_RUNNING: u32 = 1601;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_SKIPPED: u32 = 1602;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_SUCCESS: u32 = 1603;
pub const WT_STAT_CONN_SESSION_TABLE_COMPACT_TIMEOUT: u32 = 1604;
pub const WT_STAT_CONN_SESSION_TABLE_CREATE_FAIL: u32 = 1605;
pub const WT_STAT_CONN_SESSION_TABLE_CREATE_SUCCESS: u32 = 1606;
pub const WT_STAT_CONN_SESSION_TABLE_CREATE_IMPORT_FAIL: u32 = 1607;
pub const WT_STAT_CONN_SESSION_TABLE_CREATE_IMPORT_SUCCESS: u32 = 1608;
pub const WT_STAT_CONN_SESSION_TABLE_DROP_FAIL: u32 = 1609;
pub const WT_STAT_CONN_SESSION_TABLE_DROP_SUCCESS: u32 = 1610;
pub const WT_STAT_CONN_SESSION_TABLE_RENAME_FAIL: u32 = 1611;
pub const WT_STAT_CONN_SESSION_TABLE_RENAME_SUCCESS: u32 = 1612;
pub const WT_STAT_CONN_SESSION_TABLE_SALVAGE_FAIL: u32 = 1613;
pub const WT_STAT_CONN_SESSION_TABLE_SALVAGE_SUCCESS: u32 = 1614;
pub const WT_STAT_CONN_SESSION_TABLE_TRUNCATE_FAIL: u32 = 1615;
pub const WT_STAT_CONN_SESSION_TABLE_TRUNCATE_SUCCESS: u32 = 1616;
pub const WT_STAT_CONN_SESSION_TABLE_VERIFY_FAIL: u32 = 1617;
pub const WT_STAT_CONN_SESSION_TABLE_VERIFY_SUCCESS: u32 = 1618;
pub const WT_STAT_CONN_TIERED_WORK_UNITS_DEQUEUED: u32 = 1619;
pub const WT_STAT_CONN_TIERED_WORK_UNITS_REMOVED: u32 = 1620;
pub const WT_STAT_CONN_TIERED_WORK_UNITS_CREATED: u32 = 1621;
pub const WT_STAT_CONN_TIERED_RETENTION: u32 = 1622;
pub const WT_STAT_CONN_THREAD_FSYNC_ACTIVE: u32 = 1623;
pub const WT_STAT_CONN_THREAD_READ_ACTIVE: u32 = 1624;
pub const WT_STAT_CONN_THREAD_WRITE_ACTIVE: u32 = 1625;
pub const WT_STAT_CONN_APPLICATION_CACHE_OPS: u32 = 1626;
pub const WT_STAT_CONN_APPLICATION_EVICT_SNAPSHOT_REFRESHED: u32 = 1627;
pub const WT_STAT_CONN_APPLICATION_CACHE_TIME: u32 = 1628;
pub const WT_STAT_CONN_TXN_RELEASE_BLOCKED: u32 = 1629;
pub const WT_STAT_CONN_CONN_CLOSE_BLOCKED_LSM: u32 = 1630;
pub const WT_STAT_CONN_DHANDLE_LOCK_BLOCKED: u32 = 1631;
pub const WT_STAT_CONN_PAGE_INDEX_SLOT_REF_BLOCKED: u32 = 1632;
pub const WT_STAT_CONN_PREPARED_TRANSITION_BLOCKED_PAGE: u32 = 1633;
pub const WT_STAT_CONN_PAGE_BUSY_BLOCKED: u32 = 1634;
pub const WT_STAT_CONN_PAGE_FORCIBLE_EVICT_BLOCKED: u32 = 1635;
pub const WT_STAT_CONN_PAGE_LOCKED_BLOCKED: u32 = 1636;
pub const WT_STAT_CONN_PAGE_READ_BLOCKED: u32 = 1637;
pub const WT_STAT_CONN_PAGE_SLEEP: u32 = 1638;
pub const WT_STAT_CONN_PAGE_DEL_ROLLBACK_BLOCKED: u32 = 1639;
pub const WT_STAT_CONN_CHILD_MODIFY_BLOCKED_PAGE: u32 = 1640;
pub const WT_STAT_CONN_TXN_PREPARED_UPDATES: u32 = 1641;
pub const WT_STAT_CONN_TXN_PREPARED_UPDATES_COMMITTED: u32 = 1642;
pub const WT_STAT_CONN_TXN_PREPARED_UPDATES_KEY_REPEATED: u32 = 1643;
pub const WT_STAT_CONN_TXN_PREPARED_UPDATES_ROLLEDBACK: u32 = 1644;
pub const WT_STAT_CONN_TXN_READ_RACE_PREPARE_COMMIT: u32 = 1645;
pub const WT_STAT_CONN_TXN_READ_OVERFLOW_REMOVE: u32 = 1646;
pub const WT_STAT_CONN_TXN_ROLLBACK_OLDEST_PINNED: u32 = 1647;
pub const WT_STAT_CONN_TXN_PREPARE: u32 = 1648;
pub const WT_STAT_CONN_TXN_PREPARE_COMMIT: u32 = 1649;
pub const WT_STAT_CONN_TXN_PREPARE_ACTIVE: u32 = 1650;
pub const WT_STAT_CONN_TXN_PREPARE_ROLLBACK: u32 = 1651;
pub const WT_STAT_CONN_TXN_QUERY_TS: u32 = 1652;
pub const WT_STAT_CONN_TXN_READ_RACE_PREPARE_UPDATE: u32 = 1653;
pub const WT_STAT_CONN_TXN_RTS: u32 = 1654;
pub const WT_STAT_CONN_TXN_RTS_SWEEP_HS_KEYS_DRYRUN: u32 = 1655;
pub const WT_STAT_CONN_TXN_RTS_HS_STOP_OLDER_THAN_NEWER_START: u32 = 1656;
pub const WT_STAT_CONN_TXN_RTS_INCONSISTENT_CKPT: u32 = 1657;
pub const WT_STAT_CONN_TXN_RTS_KEYS_REMOVED: u32 = 1658;
pub const WT_STAT_CONN_TXN_RTS_KEYS_RESTORED: u32 = 1659;
pub const WT_STAT_CONN_TXN_RTS_KEYS_REMOVED_DRYRUN: u32 = 1660;
pub const WT_STAT_CONN_TXN_RTS_KEYS_RESTORED_DRYRUN: u32 = 1661;
pub const WT_STAT_CONN_TXN_RTS_PAGES_VISITED: u32 = 1662;
pub const WT_STAT_CONN_TXN_RTS_HS_RESTORE_TOMBSTONES: u32 = 1663;
pub const WT_STAT_CONN_TXN_RTS_HS_RESTORE_UPDATES: u32 = 1664;
pub const WT_STAT_CONN_TXN_RTS_DELETE_RLE_SKIPPED: u32 = 1665;
pub const WT_STAT_CONN_TXN_RTS_STABLE_RLE_SKIPPED: u32 = 1666;
pub const WT_STAT_CONN_TXN_RTS_SWEEP_HS_KEYS: u32 = 1667;
pub const WT_STAT_CONN_TXN_RTS_HS_RESTORE_TOMBSTONES_DRYRUN: u32 = 1668;
pub const WT_STAT_CONN_TXN_RTS_TREE_WALK_SKIP_PAGES: u32 = 1669;
pub const WT_STAT_CONN_TXN_RTS_UPD_ABORTED: u32 = 1670;
pub const WT_STAT_CONN_TXN_RTS_HS_RESTORE_UPDATES_DRYRUN: u32 = 1671;
pub const WT_STAT_CONN_TXN_RTS_HS_REMOVED: u32 = 1672;
pub const WT_STAT_CONN_TXN_RTS_UPD_ABORTED_DRYRUN: u32 = 1673;
pub const WT_STAT_CONN_TXN_RTS_HS_REMOVED_DRYRUN: u32 = 1674;
pub const WT_STAT_CONN_TXN_SESSIONS_WALKED: u32 = 1675;
pub const WT_STAT_CONN_TXN_SET_TS: u32 = 1676;
pub const WT_STAT_CONN_TXN_SET_TS_DURABLE: u32 = 1677;
pub const WT_STAT_CONN_TXN_SET_TS_DURABLE_UPD: u32 = 1678;
pub const WT_STAT_CONN_TXN_SET_TS_FORCE: u32 = 1679;
pub const WT_STAT_CONN_TXN_SET_TS_OUT_OF_ORDER: u32 = 1680;
pub const WT_STAT_CONN_TXN_SET_TS_OLDEST: u32 = 1681;
pub const WT_STAT_CONN_TXN_SET_TS_OLDEST_UPD: u32 = 1682;
pub const WT_STAT_CONN_TXN_SET_TS_STABLE: u32 = 1683;
pub const WT_STAT_CONN_TXN_SET_TS_STABLE_UPD: u32 = 1684;
pub const WT_STAT_CONN_TXN_BEGIN: u32 = 1685;
pub const WT_STAT_CONN_TXN_HS_CKPT_DURATION: u32 = 1686;
pub const WT_STAT_CONN_TXN_PINNED_RANGE: u32 = 1687;
pub const WT_STAT_CONN_TXN_PINNED_CHECKPOINT_RANGE: u32 = 1688;
pub const WT_STAT_CONN_TXN_PINNED_TIMESTAMP: u32 = 1689;
pub const WT_STAT_CONN_TXN_PINNED_TIMESTAMP_CHECKPOINT: u32 = 1690;
pub const WT_STAT_CONN_TXN_PINNED_TIMESTAMP_READER: u32 = 1691;
pub const WT_STAT_CONN_TXN_PINNED_TIMESTAMP_OLDEST: u32 = 1692;
pub const WT_STAT_CONN_TXN_TIMESTAMP_OLDEST_ACTIVE_READ: u32 = 1693;
pub const WT_STAT_CONN_TXN_ROLLBACK_TO_STABLE_RUNNING: u32 = 1694;
pub const WT_STAT_CONN_TXN_WALK_SESSIONS: u32 = 1695;
pub const WT_STAT_CONN_TXN_COMMIT: u32 = 1696;
pub const WT_STAT_CONN_TXN_ROLLBACK: u32 = 1697;
pub const WT_STAT_CONN_TXN_UPDATE_CONFLICT: u32 = 1698;
pub const WT_STAT_DSRC_BLOOM_FALSE_POSITIVE: u32 = 2000;
pub const WT_STAT_DSRC_BLOOM_HIT: u32 = 2001;
pub const WT_STAT_DSRC_BLOOM_MISS: u32 = 2002;
pub const WT_STAT_DSRC_BLOOM_PAGE_EVICT: u32 = 2003;
pub const WT_STAT_DSRC_BLOOM_PAGE_READ: u32 = 2004;
pub const WT_STAT_DSRC_BLOOM_COUNT: u32 = 2005;
pub const WT_STAT_DSRC_LSM_CHUNK_COUNT: u32 = 2006;
pub const WT_STAT_DSRC_LSM_GENERATION_MAX: u32 = 2007;
pub const WT_STAT_DSRC_LSM_LOOKUP_NO_BLOOM: u32 = 2008;
pub const WT_STAT_DSRC_LSM_CHECKPOINT_THROTTLE: u32 = 2009;
pub const WT_STAT_DSRC_LSM_MERGE_THROTTLE: u32 = 2010;
pub const WT_STAT_DSRC_BLOOM_SIZE: u32 = 2011;
pub const WT_STAT_DSRC_AUTOCOMMIT_READONLY_RETRY: u32 = 2012;
pub const WT_STAT_DSRC_AUTOCOMMIT_UPDATE_RETRY: u32 = 2013;
pub const WT_STAT_DSRC_BACKUP_BLOCKS_COMPRESSED: u32 = 2014;
pub const WT_STAT_DSRC_BACKUP_BLOCKS_UNCOMPRESSED: u32 = 2015;
pub const WT_STAT_DSRC_BLOCK_EXTENSION: u32 = 2016;
pub const WT_STAT_DSRC_BLOCK_ALLOC: u32 = 2017;
pub const WT_STAT_DSRC_BLOCK_FREE: u32 = 2018;
pub const WT_STAT_DSRC_BLOCK_CHECKPOINT_SIZE: u32 = 2019;
pub const WT_STAT_DSRC_ALLOCATION_SIZE: u32 = 2020;
pub const WT_STAT_DSRC_BLOCK_REUSE_BYTES: u32 = 2021;
pub const WT_STAT_DSRC_BLOCK_MAGIC: u32 = 2022;
pub const WT_STAT_DSRC_BLOCK_MAJOR: u32 = 2023;
pub const WT_STAT_DSRC_BLOCK_SIZE: u32 = 2024;
pub const WT_STAT_DSRC_BLOCK_MINOR: u32 = 2025;
pub const WT_STAT_DSRC_BTREE_CHECKPOINT_GENERATION: u32 = 2026;
pub const WT_STAT_DSRC_BTREE_CLEAN_CHECKPOINT_TIMER: u32 = 2027;
pub const WT_STAT_DSRC_BTREE_COMPACT_PAGES_REVIEWED: u32 = 2028;
pub const WT_STAT_DSRC_BTREE_COMPACT_PAGES_REWRITTEN: u32 = 2029;
pub const WT_STAT_DSRC_BTREE_COMPACT_PAGES_SKIPPED: u32 = 2030;
pub const WT_STAT_DSRC_BTREE_COMPACT_BYTES_REWRITTEN_EXPECTED: u32 = 2031;
pub const WT_STAT_DSRC_BTREE_COMPACT_PAGES_REWRITTEN_EXPECTED: u32 = 2032;
pub const WT_STAT_DSRC_BTREE_CHECKPOINT_PAGES_RECONCILED: u32 = 2033;
pub const WT_STAT_DSRC_BTREE_COMPACT_SKIPPED: u32 = 2034;
pub const WT_STAT_DSRC_BTREE_COLUMN_FIX: u32 = 2035;
pub const WT_STAT_DSRC_BTREE_COLUMN_TWS: u32 = 2036;
pub const WT_STAT_DSRC_BTREE_COLUMN_INTERNAL: u32 = 2037;
pub const WT_STAT_DSRC_BTREE_COLUMN_RLE: u32 = 2038;
pub const WT_STAT_DSRC_BTREE_COLUMN_DELETED: u32 = 2039;
pub const WT_STAT_DSRC_BTREE_COLUMN_VARIABLE: u32 = 2040;
pub const WT_STAT_DSRC_BTREE_FIXED_LEN: u32 = 2041;
pub const WT_STAT_DSRC_BTREE_MAXINTLPAGE: u32 = 2042;
pub const WT_STAT_DSRC_BTREE_MAXLEAFKEY: u32 = 2043;
pub const WT_STAT_DSRC_BTREE_MAXLEAFPAGE: u32 = 2044;
pub const WT_STAT_DSRC_BTREE_MAXLEAFVALUE: u32 = 2045;
pub const WT_STAT_DSRC_BTREE_MAXIMUM_DEPTH: u32 = 2046;
pub const WT_STAT_DSRC_BTREE_ENTRIES: u32 = 2047;
pub const WT_STAT_DSRC_BTREE_OVERFLOW: u32 = 2048;
pub const WT_STAT_DSRC_BTREE_ROW_EMPTY_VALUES: u32 = 2049;
pub const WT_STAT_DSRC_BTREE_ROW_INTERNAL: u32 = 2050;
pub const WT_STAT_DSRC_BTREE_ROW_LEAF: u32 = 2051;
pub const WT_STAT_DSRC_CACHE_BYTES_INUSE: u32 = 2052;
pub const WT_STAT_DSRC_CACHE_BYTES_DIRTY_TOTAL: u32 = 2053;
pub const WT_STAT_DSRC_CACHE_BYTES_READ: u32 = 2054;
pub const WT_STAT_DSRC_CACHE_BYTES_WRITE: u32 = 2055;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_CHECKPOINT: u32 = 2056;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_CHECKPOINT_HS: u32 = 2057;
pub const WT_STAT_DSRC_CACHE_EVICTION_FAIL: u32 = 2058;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_1: u32 = 2059;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_2: u32 = 2060;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_3: u32 = 2061;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_NO_TS_CHECKPOINT_RACE_4: u32 = 2062;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_REMOVE_HS_RACE_WITH_CHECKPOINT: u32 = 2063;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_NO_PROGRESS: u32 = 2064;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALK_PASSES: u32 = 2065;
pub const WT_STAT_DSRC_CACHE_EVICTION_TARGET_PAGE_LT10: u32 = 2066;
pub const WT_STAT_DSRC_CACHE_EVICTION_TARGET_PAGE_LT32: u32 = 2067;
pub const WT_STAT_DSRC_CACHE_EVICTION_TARGET_PAGE_GE128: u32 = 2068;
pub const WT_STAT_DSRC_CACHE_EVICTION_TARGET_PAGE_LT64: u32 = 2069;
pub const WT_STAT_DSRC_CACHE_EVICTION_TARGET_PAGE_LT128: u32 = 2070;
pub const WT_STAT_DSRC_CACHE_EVICTION_TARGET_PAGE_REDUCED: u32 = 2071;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALKS_ABANDONED: u32 = 2072;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALKS_STOPPED: u32 = 2073;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALKS_GAVE_UP_NO_TARGETS: u32 = 2074;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALKS_GAVE_UP_RATIO: u32 = 2075;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALK_RANDOM_RETURNS_NULL_POSITION: u32 = 2076;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALKS_ENDED: u32 = 2077;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALK_RESTART: u32 = 2078;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALK_FROM_ROOT: u32 = 2079;
pub const WT_STAT_DSRC_CACHE_EVICTION_WALK_SAVED_POS: u32 = 2080;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_HAZARD: u32 = 2081;
pub const WT_STAT_DSRC_CACHE_HS_INSERT: u32 = 2082;
pub const WT_STAT_DSRC_CACHE_HS_INSERT_RESTART: u32 = 2083;
pub const WT_STAT_DSRC_CACHE_HS_READ: u32 = 2084;
pub const WT_STAT_DSRC_CACHE_HS_READ_MISS: u32 = 2085;
pub const WT_STAT_DSRC_CACHE_HS_READ_SQUASH: u32 = 2086;
pub const WT_STAT_DSRC_CACHE_HS_ORDER_LOSE_DURABLE_TIMESTAMP: u32 = 2087;
pub const WT_STAT_DSRC_CACHE_HS_KEY_TRUNCATE_RTS_UNSTABLE: u32 = 2088;
pub const WT_STAT_DSRC_CACHE_HS_KEY_TRUNCATE_RTS: u32 = 2089;
pub const WT_STAT_DSRC_CACHE_HS_BTREE_TRUNCATE: u32 = 2090;
pub const WT_STAT_DSRC_CACHE_HS_KEY_TRUNCATE: u32 = 2091;
pub const WT_STAT_DSRC_CACHE_HS_ORDER_REMOVE: u32 = 2092;
pub const WT_STAT_DSRC_CACHE_HS_KEY_TRUNCATE_ONPAGE_REMOVAL: u32 = 2093;
pub const WT_STAT_DSRC_CACHE_HS_BTREE_TRUNCATE_DRYRUN: u32 = 2094;
pub const WT_STAT_DSRC_CACHE_HS_KEY_TRUNCATE_RTS_UNSTABLE_DRYRUN: u32 = 2095;
pub const WT_STAT_DSRC_CACHE_HS_KEY_TRUNCATE_RTS_DRYRUN: u32 = 2096;
pub const WT_STAT_DSRC_CACHE_HS_ORDER_REINSERT: u32 = 2097;
pub const WT_STAT_DSRC_CACHE_HS_WRITE_SQUASH: u32 = 2098;
pub const WT_STAT_DSRC_CACHE_INMEM_SPLITTABLE: u32 = 2099;
pub const WT_STAT_DSRC_CACHE_INMEM_SPLIT: u32 = 2100;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_INTERNAL_PAGE_SPLIT: u32 = 2101;
pub const WT_STAT_DSRC_CACHE_EVICTION_INTERNAL: u32 = 2102;
pub const WT_STAT_DSRC_CACHE_EVICTION_SPLIT_INTERNAL: u32 = 2103;
pub const WT_STAT_DSRC_CACHE_EVICTION_SPLIT_LEAF: u32 = 2104;
pub const WT_STAT_DSRC_CACHE_EVICTION_RANDOM_SAMPLE_INMEM_ROOT: u32 = 2105;
pub const WT_STAT_DSRC_CACHE_EVICTION_DIRTY: u32 = 2106;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_MULTI_BLOCK_RECONCILATION_DURING_CHECKPOINT: u32 =
  2107;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_OVERFLOW_KEYS: u32 = 2108;
pub const WT_STAT_DSRC_CACHE_READ_OVERFLOW: u32 = 2109;
pub const WT_STAT_DSRC_CACHE_EVICTION_DEEPEN: u32 = 2110;
pub const WT_STAT_DSRC_CACHE_WRITE_HS: u32 = 2111;
pub const WT_STAT_DSRC_CACHE_EVICTION_DIRTY_OBSOLETE_TW: u32 = 2112;
pub const WT_STAT_DSRC_CACHE_READ: u32 = 2113;
pub const WT_STAT_DSRC_CACHE_READ_DELETED: u32 = 2114;
pub const WT_STAT_DSRC_CACHE_READ_DELETED_PREPARED: u32 = 2115;
pub const WT_STAT_DSRC_CACHE_READ_CHECKPOINT: u32 = 2116;
pub const WT_STAT_DSRC_CACHE_PAGES_REQUESTED: u32 = 2117;
pub const WT_STAT_DSRC_CACHE_PAGES_PREFETCH: u32 = 2118;
pub const WT_STAT_DSRC_CACHE_EVICTION_PAGES_SEEN: u32 = 2119;
pub const WT_STAT_DSRC_CACHE_WRITE: u32 = 2120;
pub const WT_STAT_DSRC_CACHE_WRITE_RESTORE: u32 = 2121;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_RECENTLY_MODIFIED: u32 = 2122;
pub const WT_STAT_DSRC_CACHE_REVERSE_SPLITS: u32 = 2123;
pub const WT_STAT_DSRC_CACHE_REVERSE_SPLITS_SKIPPED_VLCS: u32 = 2124;
pub const WT_STAT_DSRC_CACHE_HS_INSERT_FULL_UPDATE: u32 = 2125;
pub const WT_STAT_DSRC_CACHE_HS_INSERT_REVERSE_MODIFY: u32 = 2126;
pub const WT_STAT_DSRC_CACHE_BYTES_DIRTY: u32 = 2127;
pub const WT_STAT_DSRC_CACHE_EVICTION_BLOCKED_UNCOMMITTED_TRUNCATE: u32 = 2128;
pub const WT_STAT_DSRC_CACHE_EVICTION_CLEAN: u32 = 2129;
pub const WT_STAT_DSRC_CACHE_STATE_GEN_AVG_GAP: u32 = 2130;
pub const WT_STAT_DSRC_CACHE_STATE_AVG_WRITTEN_SIZE: u32 = 2131;
pub const WT_STAT_DSRC_CACHE_STATE_AVG_VISITED_AGE: u32 = 2132;
pub const WT_STAT_DSRC_CACHE_STATE_AVG_UNVISITED_AGE: u32 = 2133;
pub const WT_STAT_DSRC_CACHE_STATE_PAGES_CLEAN: u32 = 2134;
pub const WT_STAT_DSRC_CACHE_STATE_GEN_CURRENT: u32 = 2135;
pub const WT_STAT_DSRC_CACHE_STATE_PAGES_DIRTY: u32 = 2136;
pub const WT_STAT_DSRC_CACHE_STATE_ROOT_ENTRIES: u32 = 2137;
pub const WT_STAT_DSRC_CACHE_STATE_PAGES_INTERNAL: u32 = 2138;
pub const WT_STAT_DSRC_CACHE_STATE_PAGES_LEAF: u32 = 2139;
pub const WT_STAT_DSRC_CACHE_STATE_GEN_MAX_GAP: u32 = 2140;
pub const WT_STAT_DSRC_CACHE_STATE_MAX_PAGESIZE: u32 = 2141;
pub const WT_STAT_DSRC_CACHE_STATE_MIN_WRITTEN_SIZE: u32 = 2142;
pub const WT_STAT_DSRC_CACHE_STATE_UNVISITED_COUNT: u32 = 2143;
pub const WT_STAT_DSRC_CACHE_STATE_SMALLER_ALLOC_SIZE: u32 = 2144;
pub const WT_STAT_DSRC_CACHE_STATE_MEMORY: u32 = 2145;
pub const WT_STAT_DSRC_CACHE_STATE_QUEUED: u32 = 2146;
pub const WT_STAT_DSRC_CACHE_STATE_NOT_QUEUEABLE: u32 = 2147;
pub const WT_STAT_DSRC_CACHE_STATE_REFS_SKIPPED: u32 = 2148;
pub const WT_STAT_DSRC_CACHE_STATE_ROOT_SIZE: u32 = 2149;
pub const WT_STAT_DSRC_CACHE_STATE_PAGES: u32 = 2150;
pub const WT_STAT_DSRC_CHECKPOINT_SNAPSHOT_ACQUIRED: u32 = 2151;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_EVICT: u32 = 2152;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_OBSOLETE_TW: u32 = 2153;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_READ_RECLAIM_SPACE: u32 = 2154;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_READ_OBSOLETE_TW: u32 = 2155;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_REMOVED: u32 = 2156;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_WALK_SKIPPED: u32 = 2157;
pub const WT_STAT_DSRC_CHECKPOINT_CLEANUP_PAGES_VISITED: u32 = 2158;
pub const WT_STAT_DSRC_CHECKPOINT_OBSOLETE_APPLIED: u32 = 2159;
pub const WT_STAT_DSRC_COMPRESS_PRECOMP_INTL_MAX_PAGE_SIZE: u32 = 2160;
pub const WT_STAT_DSRC_COMPRESS_PRECOMP_LEAF_MAX_PAGE_SIZE: u32 = 2161;
pub const WT_STAT_DSRC_COMPRESS_WRITE_FAIL: u32 = 2162;
pub const WT_STAT_DSRC_COMPRESS_WRITE_TOO_SMALL: u32 = 2163;
pub const WT_STAT_DSRC_COMPRESS_READ: u32 = 2164;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_MAX: u32 = 2165;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_2: u32 = 2166;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_4: u32 = 2167;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_8: u32 = 2168;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_16: u32 = 2169;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_32: u32 = 2170;
pub const WT_STAT_DSRC_COMPRESS_READ_RATIO_HIST_64: u32 = 2171;
pub const WT_STAT_DSRC_COMPRESS_WRITE: u32 = 2172;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_MAX: u32 = 2173;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_2: u32 = 2174;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_4: u32 = 2175;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_8: u32 = 2176;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_16: u32 = 2177;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_32: u32 = 2178;
pub const WT_STAT_DSRC_COMPRESS_WRITE_RATIO_HIST_64: u32 = 2179;
pub const WT_STAT_DSRC_CURSOR_TREE_WALK_DEL_PAGE_SKIP: u32 = 2180;
pub const WT_STAT_DSRC_CURSOR_NEXT_SKIP_TOTAL: u32 = 2181;
pub const WT_STAT_DSRC_CURSOR_PREV_SKIP_TOTAL: u32 = 2182;
pub const WT_STAT_DSRC_CURSOR_SKIP_HS_CUR_POSITION: u32 = 2183;
pub const WT_STAT_DSRC_CURSOR_TREE_WALK_INMEM_DEL_PAGE_SKIP: u32 = 2184;
pub const WT_STAT_DSRC_CURSOR_TREE_WALK_ONDISK_DEL_PAGE_SKIP: u32 = 2185;
pub const WT_STAT_DSRC_CURSOR_SEARCH_NEAR_PREFIX_FAST_PATHS: u32 = 2186;
pub const WT_STAT_DSRC_CURSOR_REPOSITION_FAILED: u32 = 2187;
pub const WT_STAT_DSRC_CURSOR_REPOSITION: u32 = 2188;
pub const WT_STAT_DSRC_CURSOR_INSERT_BULK: u32 = 2189;
pub const WT_STAT_DSRC_CURSOR_REOPEN: u32 = 2190;
pub const WT_STAT_DSRC_CURSOR_CACHE: u32 = 2191;
pub const WT_STAT_DSRC_CURSOR_CREATE: u32 = 2192;
pub const WT_STAT_DSRC_CURSOR_BOUND_ERROR: u32 = 2193;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_RESET: u32 = 2194;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_COMPARISONS: u32 = 2195;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_NEXT_UNPOSITIONED: u32 = 2196;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_NEXT_EARLY_EXIT: u32 = 2197;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_PREV_UNPOSITIONED: u32 = 2198;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_PREV_EARLY_EXIT: u32 = 2199;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_SEARCH_EARLY_EXIT: u32 = 2200;
pub const WT_STAT_DSRC_CURSOR_BOUNDS_SEARCH_NEAR_REPOSITIONED_CURSOR: u32 = 2201;
pub const WT_STAT_DSRC_CURSOR_CACHE_ERROR: u32 = 2202;
pub const WT_STAT_DSRC_CURSOR_CLOSE_ERROR: u32 = 2203;
pub const WT_STAT_DSRC_CURSOR_COMPARE_ERROR: u32 = 2204;
pub const WT_STAT_DSRC_CURSOR_EQUALS_ERROR: u32 = 2205;
pub const WT_STAT_DSRC_CURSOR_GET_KEY_ERROR: u32 = 2206;
pub const WT_STAT_DSRC_CURSOR_GET_VALUE_ERROR: u32 = 2207;
pub const WT_STAT_DSRC_CURSOR_INSERT_ERROR: u32 = 2208;
pub const WT_STAT_DSRC_CURSOR_INSERT_CHECK_ERROR: u32 = 2209;
pub const WT_STAT_DSRC_CURSOR_LARGEST_KEY_ERROR: u32 = 2210;
pub const WT_STAT_DSRC_CURSOR_MODIFY_ERROR: u32 = 2211;
pub const WT_STAT_DSRC_CURSOR_NEXT_ERROR: u32 = 2212;
pub const WT_STAT_DSRC_CURSOR_NEXT_HS_TOMBSTONE: u32 = 2213;
pub const WT_STAT_DSRC_CURSOR_NEXT_SKIP_LT_100: u32 = 2214;
pub const WT_STAT_DSRC_CURSOR_NEXT_SKIP_GE_100: u32 = 2215;
pub const WT_STAT_DSRC_CURSOR_NEXT_RANDOM_ERROR: u32 = 2216;
pub const WT_STAT_DSRC_CURSOR_PREV_ERROR: u32 = 2217;
pub const WT_STAT_DSRC_CURSOR_PREV_HS_TOMBSTONE: u32 = 2218;
pub const WT_STAT_DSRC_CURSOR_PREV_SKIP_GE_100: u32 = 2219;
pub const WT_STAT_DSRC_CURSOR_PREV_SKIP_LT_100: u32 = 2220;
pub const WT_STAT_DSRC_CURSOR_RECONFIGURE_ERROR: u32 = 2221;
pub const WT_STAT_DSRC_CURSOR_REMOVE_ERROR: u32 = 2222;
pub const WT_STAT_DSRC_CURSOR_REOPEN_ERROR: u32 = 2223;
pub const WT_STAT_DSRC_CURSOR_RESERVE_ERROR: u32 = 2224;
pub const WT_STAT_DSRC_CURSOR_RESET_ERROR: u32 = 2225;
pub const WT_STAT_DSRC_CURSOR_SEARCH_ERROR: u32 = 2226;
pub const WT_STAT_DSRC_CURSOR_SEARCH_NEAR_ERROR: u32 = 2227;
pub const WT_STAT_DSRC_CURSOR_UPDATE_ERROR: u32 = 2228;
pub const WT_STAT_DSRC_CURSOR_INSERT: u32 = 2229;
pub const WT_STAT_DSRC_CURSOR_INSERT_BYTES: u32 = 2230;
pub const WT_STAT_DSRC_CURSOR_MODIFY: u32 = 2231;
pub const WT_STAT_DSRC_CURSOR_MODIFY_BYTES: u32 = 2232;
pub const WT_STAT_DSRC_CURSOR_MODIFY_BYTES_TOUCH: u32 = 2233;
pub const WT_STAT_DSRC_CURSOR_NEXT: u32 = 2234;
pub const WT_STAT_DSRC_CURSOR_OPEN_COUNT: u32 = 2235;
pub const WT_STAT_DSRC_CURSOR_RESTART: u32 = 2236;
pub const WT_STAT_DSRC_CURSOR_PREV: u32 = 2237;
pub const WT_STAT_DSRC_CURSOR_REMOVE: u32 = 2238;
pub const WT_STAT_DSRC_CURSOR_REMOVE_BYTES: u32 = 2239;
pub const WT_STAT_DSRC_CURSOR_RESERVE: u32 = 2240;
pub const WT_STAT_DSRC_CURSOR_RESET: u32 = 2241;
pub const WT_STAT_DSRC_CURSOR_SEARCH: u32 = 2242;
pub const WT_STAT_DSRC_CURSOR_SEARCH_HS: u32 = 2243;
pub const WT_STAT_DSRC_CURSOR_SEARCH_NEAR: u32 = 2244;
pub const WT_STAT_DSRC_CURSOR_TRUNCATE: u32 = 2245;
pub const WT_STAT_DSRC_CURSOR_UPDATE: u32 = 2246;
pub const WT_STAT_DSRC_CURSOR_UPDATE_BYTES: u32 = 2247;
pub const WT_STAT_DSRC_CURSOR_UPDATE_BYTES_CHANGED: u32 = 2248;
pub const WT_STAT_DSRC_REC_VLCS_EMPTIED_PAGES: u32 = 2249;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_BYTES_TS: u32 = 2250;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_BYTES_TXN: u32 = 2251;
pub const WT_STAT_DSRC_REC_DICTIONARY: u32 = 2252;
pub const WT_STAT_DSRC_REC_PAGE_DELETE_FAST: u32 = 2253;
pub const WT_STAT_DSRC_REC_SUFFIX_COMPRESSION: u32 = 2254;
pub const WT_STAT_DSRC_REC_MULTIBLOCK_INTERNAL: u32 = 2255;
pub const WT_STAT_DSRC_REC_PREFIX_COMPRESSION: u32 = 2256;
pub const WT_STAT_DSRC_REC_MULTIBLOCK_LEAF: u32 = 2257;
pub const WT_STAT_DSRC_REC_OVERFLOW_KEY_LEAF: u32 = 2258;
pub const WT_STAT_DSRC_REC_MULTIBLOCK_MAX: u32 = 2259;
pub const WT_STAT_DSRC_REC_OVERFLOW_VALUE: u32 = 2260;
pub const WT_STAT_DSRC_REC_PAGES: u32 = 2261;
pub const WT_STAT_DSRC_REC_PAGES_EVICTION: u32 = 2262;
pub const WT_STAT_DSRC_REC_PAGE_DELETE: u32 = 2263;
pub const WT_STAT_DSRC_REC_TIME_AGGR_NEWEST_START_DURABLE_TS: u32 = 2264;
pub const WT_STAT_DSRC_REC_TIME_AGGR_NEWEST_STOP_DURABLE_TS: u32 = 2265;
pub const WT_STAT_DSRC_REC_TIME_AGGR_NEWEST_STOP_TS: u32 = 2266;
pub const WT_STAT_DSRC_REC_TIME_AGGR_NEWEST_STOP_TXN: u32 = 2267;
pub const WT_STAT_DSRC_REC_TIME_AGGR_NEWEST_TXN: u32 = 2268;
pub const WT_STAT_DSRC_REC_TIME_AGGR_OLDEST_START_TS: u32 = 2269;
pub const WT_STAT_DSRC_REC_TIME_AGGR_PREPARED: u32 = 2270;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_PREPARED: u32 = 2271;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_DURABLE_START_TS: u32 = 2272;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_START_TS: u32 = 2273;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_START_TXN: u32 = 2274;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_DURABLE_STOP_TS: u32 = 2275;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_STOP_TS: u32 = 2276;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PAGES_STOP_TXN: u32 = 2277;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_PREPARED: u32 = 2278;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_DURABLE_START_TS: u32 = 2279;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_START_TS: u32 = 2280;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_START_TXN: u32 = 2281;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_DURABLE_STOP_TS: u32 = 2282;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_STOP_TS: u32 = 2283;
pub const WT_STAT_DSRC_REC_TIME_WINDOW_STOP_TXN: u32 = 2284;
pub const WT_STAT_DSRC_SESSION_COMPACT: u32 = 2285;
pub const WT_STAT_DSRC_TXN_READ_RACE_PREPARE_COMMIT: u32 = 2286;
pub const WT_STAT_DSRC_TXN_READ_OVERFLOW_REMOVE: u32 = 2287;
pub const WT_STAT_DSRC_TXN_READ_RACE_PREPARE_UPDATE: u32 = 2288;
pub const WT_STAT_DSRC_TXN_RTS_SWEEP_HS_KEYS_DRYRUN: u32 = 2289;
pub const WT_STAT_DSRC_TXN_RTS_HS_STOP_OLDER_THAN_NEWER_START: u32 = 2290;
pub const WT_STAT_DSRC_TXN_RTS_INCONSISTENT_CKPT: u32 = 2291;
pub const WT_STAT_DSRC_TXN_RTS_KEYS_REMOVED: u32 = 2292;
pub const WT_STAT_DSRC_TXN_RTS_KEYS_RESTORED: u32 = 2293;
pub const WT_STAT_DSRC_TXN_RTS_KEYS_REMOVED_DRYRUN: u32 = 2294;
pub const WT_STAT_DSRC_TXN_RTS_KEYS_RESTORED_DRYRUN: u32 = 2295;
pub const WT_STAT_DSRC_TXN_RTS_HS_RESTORE_TOMBSTONES: u32 = 2296;
pub const WT_STAT_DSRC_TXN_RTS_HS_RESTORE_UPDATES: u32 = 2297;
pub const WT_STAT_DSRC_TXN_RTS_DELETE_RLE_SKIPPED: u32 = 2298;
pub const WT_STAT_DSRC_TXN_RTS_STABLE_RLE_SKIPPED: u32 = 2299;
pub const WT_STAT_DSRC_TXN_RTS_SWEEP_HS_KEYS: u32 = 2300;
pub const WT_STAT_DSRC_TXN_RTS_HS_RESTORE_TOMBSTONES_DRYRUN: u32 = 2301;
pub const WT_STAT_DSRC_TXN_RTS_HS_RESTORE_UPDATES_DRYRUN: u32 = 2302;
pub const WT_STAT_DSRC_TXN_RTS_HS_REMOVED: u32 = 2303;
pub const WT_STAT_DSRC_TXN_RTS_HS_REMOVED_DRYRUN: u32 = 2304;
pub const WT_STAT_DSRC_TXN_UPDATE_CONFLICT: u32 = 2305;
pub const WT_STAT_JOIN_MAIN_ACCESS: u32 = 3000;
pub const WT_STAT_JOIN_BLOOM_FALSE_POSITIVE: u32 = 3001;
pub const WT_STAT_JOIN_MEMBERSHIP_CHECK: u32 = 3002;
pub const WT_STAT_JOIN_BLOOM_INSERT: u32 = 3003;
pub const WT_STAT_JOIN_ITERATED: u32 = 3004;
pub const WT_STAT_SESSION_BYTES_READ: u32 = 4000;
pub const WT_STAT_SESSION_BYTES_WRITE: u32 = 4001;
pub const WT_STAT_SESSION_LOCK_DHANDLE_WAIT: u32 = 4002;
pub const WT_STAT_SESSION_TXN_BYTES_DIRTY: u32 = 4003;
pub const WT_STAT_SESSION_READ_TIME: u32 = 4004;
pub const WT_STAT_SESSION_WRITE_TIME: u32 = 4005;
pub const WT_STAT_SESSION_LOCK_SCHEMA_WAIT: u32 = 4006;
pub const WT_STAT_SESSION_CACHE_TIME: u32 = 4007;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
  pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
  assert_eq!(
    ::std::mem::size_of::<__fsid_t>(),
    8usize,
    concat!("Size of: ", stringify!(__fsid_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__fsid_t>(),
    4usize,
    concat!("Alignment of ", stringify!(__fsid_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__fsid_t),
      "::",
      stringify!(__val)
    )
  );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
  pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
  assert_eq!(
    ::std::mem::size_of::<__sigset_t>(),
    128usize,
    concat!("Size of: ", stringify!(__sigset_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__sigset_t>(),
    8usize,
    concat!("Alignment of ", stringify!(__sigset_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__sigset_t),
      "::",
      stringify!(__val)
    )
  );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
  pub tv_sec: __time_t,
  pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
  assert_eq!(
    ::std::mem::size_of::<timeval>(),
    16usize,
    concat!("Size of: ", stringify!(timeval))
  );
  assert_eq!(
    ::std::mem::align_of::<timeval>(),
    8usize,
    concat!("Alignment of ", stringify!(timeval))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(timeval),
      "::",
      stringify!(tv_sec)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(timeval),
      "::",
      stringify!(tv_usec)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
  pub tv_sec: __time_t,
  pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
  assert_eq!(
    ::std::mem::size_of::<timespec>(),
    16usize,
    concat!("Size of: ", stringify!(timespec))
  );
  assert_eq!(
    ::std::mem::align_of::<timespec>(),
    8usize,
    concat!("Alignment of ", stringify!(timespec))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(timespec),
      "::",
      stringify!(tv_sec)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(timespec),
      "::",
      stringify!(tv_nsec)
    )
  );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
  pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
  assert_eq!(
    ::std::mem::size_of::<fd_set>(),
    128usize,
    concat!("Size of: ", stringify!(fd_set))
  );
  assert_eq!(
    ::std::mem::align_of::<fd_set>(),
    8usize,
    concat!("Alignment of ", stringify!(fd_set))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(fd_set),
      "::",
      stringify!(__fds_bits)
    )
  );
}
pub type fd_mask = __fd_mask;
extern "C" {
  pub fn select(
    __nfds: ::std::os::raw::c_int,
    __readfds: *mut fd_set,
    __writefds: *mut fd_set,
    __exceptfds: *mut fd_set,
    __timeout: *mut timeval,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pselect(
    __nfds: ::std::os::raw::c_int,
    __readfds: *mut fd_set,
    __writefds: *mut fd_set,
    __exceptfds: *mut fd_set,
    __timeout: *const timespec,
    __sigmask: *const __sigset_t,
  ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
  pub __value64: ::std::os::raw::c_ulonglong,
  pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
  pub __low: ::std::os::raw::c_uint,
  pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
    8usize,
    concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(__atomic_wide_counter__bindgen_ty_1)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__low as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__atomic_wide_counter__bindgen_ty_1),
      "::",
      stringify!(__low)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__atomic_wide_counter__bindgen_ty_1>())).__high as *const _ as usize
    },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__atomic_wide_counter__bindgen_ty_1),
      "::",
      stringify!(__high)
    )
  );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
  assert_eq!(
    ::std::mem::size_of::<__atomic_wide_counter>(),
    8usize,
    concat!("Size of: ", stringify!(__atomic_wide_counter))
  );
  assert_eq!(
    ::std::mem::align_of::<__atomic_wide_counter>(),
    8usize,
    concat!("Alignment of ", stringify!(__atomic_wide_counter))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value64 as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__atomic_wide_counter),
      "::",
      stringify!(__value64)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__atomic_wide_counter>())).__value32 as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__atomic_wide_counter),
      "::",
      stringify!(__value32)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
  pub __prev: *mut __pthread_internal_list,
  pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
  assert_eq!(
    ::std::mem::size_of::<__pthread_internal_list>(),
    16usize,
    concat!("Size of: ", stringify!(__pthread_internal_list))
  );
  assert_eq!(
    ::std::mem::align_of::<__pthread_internal_list>(),
    8usize,
    concat!("Alignment of ", stringify!(__pthread_internal_list))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_internal_list),
      "::",
      stringify!(__prev)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_internal_list),
      "::",
      stringify!(__next)
    )
  );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
  pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
  assert_eq!(
    ::std::mem::size_of::<__pthread_internal_slist>(),
    8usize,
    concat!("Size of: ", stringify!(__pthread_internal_slist))
  );
  assert_eq!(
    ::std::mem::align_of::<__pthread_internal_slist>(),
    8usize,
    concat!("Alignment of ", stringify!(__pthread_internal_slist))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_internal_slist),
      "::",
      stringify!(__next)
    )
  );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
  pub __lock: ::std::os::raw::c_int,
  pub __count: ::std::os::raw::c_uint,
  pub __owner: ::std::os::raw::c_int,
  pub __nusers: ::std::os::raw::c_uint,
  pub __kind: ::std::os::raw::c_int,
  pub __spins: ::std::os::raw::c_short,
  pub __elision: ::std::os::raw::c_short,
  pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
  assert_eq!(
    ::std::mem::size_of::<__pthread_mutex_s>(),
    40usize,
    concat!("Size of: ", stringify!(__pthread_mutex_s))
  );
  assert_eq!(
    ::std::mem::align_of::<__pthread_mutex_s>(),
    8usize,
    concat!("Alignment of ", stringify!(__pthread_mutex_s))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__lock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__count)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__owner)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__nusers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__kind)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__spins)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
    22usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__elision)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_mutex_s),
      "::",
      stringify!(__list)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
  pub __readers: ::std::os::raw::c_uint,
  pub __writers: ::std::os::raw::c_uint,
  pub __wrphase_futex: ::std::os::raw::c_uint,
  pub __writers_futex: ::std::os::raw::c_uint,
  pub __pad3: ::std::os::raw::c_uint,
  pub __pad4: ::std::os::raw::c_uint,
  pub __cur_writer: ::std::os::raw::c_int,
  pub __shared: ::std::os::raw::c_int,
  pub __rwelision: ::std::os::raw::c_schar,
  pub __pad1: [::std::os::raw::c_uchar; 7usize],
  pub __pad2: ::std::os::raw::c_ulong,
  pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
  assert_eq!(
    ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
    56usize,
    concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
    8usize,
    concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__readers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__writers)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__wrphase_futex)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
    },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__writers_futex)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__pad3)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__pad4)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
    },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__cur_writer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__shared)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__rwelision)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
    33usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__pad1)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__pad2)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_rwlock_arch_t),
      "::",
      stringify!(__flags)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
  pub __wseq: __atomic_wide_counter,
  pub __g1_start: __atomic_wide_counter,
  pub __g_refs: [::std::os::raw::c_uint; 2usize],
  pub __g_size: [::std::os::raw::c_uint; 2usize],
  pub __g1_orig_size: ::std::os::raw::c_uint,
  pub __wrefs: ::std::os::raw::c_uint,
  pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
  assert_eq!(
    ::std::mem::size_of::<__pthread_cond_s>(),
    48usize,
    concat!("Size of: ", stringify!(__pthread_cond_s))
  );
  assert_eq!(
    ::std::mem::align_of::<__pthread_cond_s>(),
    8usize,
    concat!("Alignment of ", stringify!(__pthread_cond_s))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wseq as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__wseq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_start as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__g1_start)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__g_refs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__g_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__g1_orig_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
    36usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__wrefs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__pthread_cond_s),
      "::",
      stringify!(__g_signals)
    )
  );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
  pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
  assert_eq!(
    ::std::mem::size_of::<__once_flag>(),
    4usize,
    concat!("Size of: ", stringify!(__once_flag))
  );
  assert_eq!(
    ::std::mem::align_of::<__once_flag>(),
    4usize,
    concat!("Alignment of ", stringify!(__once_flag))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__once_flag),
      "::",
      stringify!(__data)
    )
  );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
  pub __size: [::std::os::raw::c_char; 4usize],
  pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_mutexattr_t>(),
    4usize,
    concat!("Size of: ", stringify!(pthread_mutexattr_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_mutexattr_t>(),
    4usize,
    concat!("Alignment of ", stringify!(pthread_mutexattr_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_mutexattr_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_mutexattr_t),
      "::",
      stringify!(__align)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
  pub __size: [::std::os::raw::c_char; 4usize],
  pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_condattr_t>(),
    4usize,
    concat!("Size of: ", stringify!(pthread_condattr_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_condattr_t>(),
    4usize,
    concat!("Alignment of ", stringify!(pthread_condattr_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_condattr_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_condattr_t),
      "::",
      stringify!(__align)
    )
  );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
  pub __size: [::std::os::raw::c_char; 56usize],
  pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_attr_t>(),
    56usize,
    concat!("Size of: ", stringify!(pthread_attr_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_attr_t>(),
    8usize,
    concat!("Alignment of ", stringify!(pthread_attr_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_attr_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_attr_t),
      "::",
      stringify!(__align)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
  pub __data: __pthread_mutex_s,
  pub __size: [::std::os::raw::c_char; 40usize],
  pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_mutex_t>(),
    40usize,
    concat!("Size of: ", stringify!(pthread_mutex_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_mutex_t>(),
    8usize,
    concat!("Alignment of ", stringify!(pthread_mutex_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_mutex_t),
      "::",
      stringify!(__data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_mutex_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_mutex_t),
      "::",
      stringify!(__align)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
  pub __data: __pthread_cond_s,
  pub __size: [::std::os::raw::c_char; 48usize],
  pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_cond_t>(),
    48usize,
    concat!("Size of: ", stringify!(pthread_cond_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_cond_t>(),
    8usize,
    concat!("Alignment of ", stringify!(pthread_cond_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_cond_t),
      "::",
      stringify!(__data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_cond_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_cond_t),
      "::",
      stringify!(__align)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
  pub __data: __pthread_rwlock_arch_t,
  pub __size: [::std::os::raw::c_char; 56usize],
  pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_rwlock_t>(),
    56usize,
    concat!("Size of: ", stringify!(pthread_rwlock_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_rwlock_t>(),
    8usize,
    concat!("Alignment of ", stringify!(pthread_rwlock_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_rwlock_t),
      "::",
      stringify!(__data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_rwlock_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_rwlock_t),
      "::",
      stringify!(__align)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
  pub __size: [::std::os::raw::c_char; 8usize],
  pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_rwlockattr_t>(),
    8usize,
    concat!("Size of: ", stringify!(pthread_rwlockattr_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_rwlockattr_t>(),
    8usize,
    concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_rwlockattr_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_rwlockattr_t),
      "::",
      stringify!(__align)
    )
  );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
  pub __size: [::std::os::raw::c_char; 32usize],
  pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_barrier_t>(),
    32usize,
    concat!("Size of: ", stringify!(pthread_barrier_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_barrier_t>(),
    8usize,
    concat!("Alignment of ", stringify!(pthread_barrier_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_barrier_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_barrier_t),
      "::",
      stringify!(__align)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
  pub __size: [::std::os::raw::c_char; 4usize],
  pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
  assert_eq!(
    ::std::mem::size_of::<pthread_barrierattr_t>(),
    4usize,
    concat!("Size of: ", stringify!(pthread_barrierattr_t))
  );
  assert_eq!(
    ::std::mem::align_of::<pthread_barrierattr_t>(),
    4usize,
    concat!("Alignment of ", stringify!(pthread_barrierattr_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_barrierattr_t),
      "::",
      stringify!(__size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(pthread_barrierattr_t),
      "::",
      stringify!(__align)
    )
  );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
  pub quot: ::std::os::raw::c_long,
  pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
  assert_eq!(
    ::std::mem::size_of::<imaxdiv_t>(),
    16usize,
    concat!("Size of: ", stringify!(imaxdiv_t))
  );
  assert_eq!(
    ::std::mem::align_of::<imaxdiv_t>(),
    8usize,
    concat!("Alignment of ", stringify!(imaxdiv_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(imaxdiv_t),
      "::",
      stringify!(quot)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(imaxdiv_t),
      "::",
      stringify!(rem)
    )
  );
}
extern "C" {
  pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
  pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
  pub fn strtoimax(
    __nptr: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> intmax_t;
}
extern "C" {
  pub fn strtoumax(
    __nptr: *const ::std::os::raw::c_char,
    __endptr: *mut *mut ::std::os::raw::c_char,
    __base: ::std::os::raw::c_int,
  ) -> uintmax_t;
}
extern "C" {
  pub fn wcstoimax(
    __nptr: *const __gwchar_t,
    __endptr: *mut *mut __gwchar_t,
    __base: ::std::os::raw::c_int,
  ) -> intmax_t;
}
extern "C" {
  pub fn wcstoumax(
    __nptr: *const __gwchar_t,
    __endptr: *mut *mut __gwchar_t,
    __base: ::std::os::raw::c_int,
  ) -> uintmax_t;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
  pub __count: ::std::os::raw::c_int,
  pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
  pub __wch: ::std::os::raw::c_uint,
  pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
    4usize,
    concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
    4usize,
    concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t__bindgen_ty_1),
      "::",
      stringify!(__wch)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t__bindgen_ty_1),
      "::",
      stringify!(__wchb)
    )
  );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
  assert_eq!(
    ::std::mem::size_of::<__mbstate_t>(),
    8usize,
    concat!("Size of: ", stringify!(__mbstate_t))
  );
  assert_eq!(
    ::std::mem::align_of::<__mbstate_t>(),
    4usize,
    concat!("Alignment of ", stringify!(__mbstate_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t),
      "::",
      stringify!(__count)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__mbstate_t),
      "::",
      stringify!(__value)
    )
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
  pub __pos: __off_t,
  pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
  assert_eq!(
    ::std::mem::size_of::<_G_fpos_t>(),
    16usize,
    concat!("Size of: ", stringify!(_G_fpos_t))
  );
  assert_eq!(
    ::std::mem::align_of::<_G_fpos_t>(),
    8usize,
    concat!("Alignment of ", stringify!(_G_fpos_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_G_fpos_t),
      "::",
      stringify!(__pos)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_G_fpos_t),
      "::",
      stringify!(__state)
    )
  );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
  pub __pos: __off64_t,
  pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
  assert_eq!(
    ::std::mem::size_of::<_G_fpos64_t>(),
    16usize,
    concat!("Size of: ", stringify!(_G_fpos64_t))
  );
  assert_eq!(
    ::std::mem::align_of::<_G_fpos64_t>(),
    8usize,
    concat!("Alignment of ", stringify!(_G_fpos64_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_G_fpos64_t),
      "::",
      stringify!(__pos)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_G_fpos64_t),
      "::",
      stringify!(__state)
    )
  );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
  _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
  pub _flags: ::std::os::raw::c_int,
  pub _IO_read_ptr: *mut ::std::os::raw::c_char,
  pub _IO_read_end: *mut ::std::os::raw::c_char,
  pub _IO_read_base: *mut ::std::os::raw::c_char,
  pub _IO_write_base: *mut ::std::os::raw::c_char,
  pub _IO_write_ptr: *mut ::std::os::raw::c_char,
  pub _IO_write_end: *mut ::std::os::raw::c_char,
  pub _IO_buf_base: *mut ::std::os::raw::c_char,
  pub _IO_buf_end: *mut ::std::os::raw::c_char,
  pub _IO_save_base: *mut ::std::os::raw::c_char,
  pub _IO_backup_base: *mut ::std::os::raw::c_char,
  pub _IO_save_end: *mut ::std::os::raw::c_char,
  pub _markers: *mut _IO_marker,
  pub _chain: *mut _IO_FILE,
  pub _fileno: ::std::os::raw::c_int,
  pub _flags2: ::std::os::raw::c_int,
  pub _old_offset: __off_t,
  pub _cur_column: ::std::os::raw::c_ushort,
  pub _vtable_offset: ::std::os::raw::c_schar,
  pub _shortbuf: [::std::os::raw::c_char; 1usize],
  pub _lock: *mut _IO_lock_t,
  pub _offset: __off64_t,
  pub _codecvt: *mut _IO_codecvt,
  pub _wide_data: *mut _IO_wide_data,
  pub _freeres_list: *mut _IO_FILE,
  pub _freeres_buf: *mut ::std::os::raw::c_void,
  pub __pad5: size_t,
  pub _mode: ::std::os::raw::c_int,
  pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
  assert_eq!(
    ::std::mem::size_of::<_IO_FILE>(),
    216usize,
    concat!("Size of: ", stringify!(_IO_FILE))
  );
  assert_eq!(
    ::std::mem::align_of::<_IO_FILE>(),
    8usize,
    concat!("Alignment of ", stringify!(_IO_FILE))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_flags)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_buf_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_buf_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_save_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_backup_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_save_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_markers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_chain)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_fileno)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
    116usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_flags2)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_old_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_cur_column)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
    130usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_vtable_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
    131usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_shortbuf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_lock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_codecvt)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_wide_data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_freeres_list)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_freeres_buf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(__pad5)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_mode)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
    196usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_unused2)
    )
  );
}
pub type fpos_t = __fpos_t;
extern "C" {
  pub static mut stdin: *mut FILE;
}
extern "C" {
  pub static mut stdout: *mut FILE;
}
extern "C" {
  pub static mut stderr: *mut FILE;
}
extern "C" {
  pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn rename(
    __old: *const ::std::os::raw::c_char,
    __new: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn renameat(
    __oldfd: ::std::os::raw::c_int,
    __old: *const ::std::os::raw::c_char,
    __newfd: ::std::os::raw::c_int,
    __new: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn tmpfile() -> *mut FILE;
}
extern "C" {
  pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn tempnam(
    __dir: *const ::std::os::raw::c_char,
    __pfx: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fopen(
    __filename: *const ::std::os::raw::c_char,
    __modes: *const ::std::os::raw::c_char,
  ) -> *mut FILE;
}
extern "C" {
  pub fn freopen(
    __filename: *const ::std::os::raw::c_char,
    __modes: *const ::std::os::raw::c_char,
    __stream: *mut FILE,
  ) -> *mut FILE;
}
extern "C" {
  pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
  pub fn fmemopen(
    __s: *mut ::std::os::raw::c_void,
    __len: size_t,
    __modes: *const ::std::os::raw::c_char,
  ) -> *mut FILE;
}
extern "C" {
  pub fn open_memstream(
    __bufloc: *mut *mut ::std::os::raw::c_char,
    __sizeloc: *mut size_t,
  ) -> *mut FILE;
}
extern "C" {
  pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
  pub fn setvbuf(
    __stream: *mut FILE,
    __buf: *mut ::std::os::raw::c_char,
    __modes: ::std::os::raw::c_int,
    __n: size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
  pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
  pub fn fprintf(
    __stream: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn sprintf(
    __s: *mut ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vfprintf(
    __s: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vprintf(
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vsprintf(
    __s: *mut ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn snprintf(
    __s: *mut ::std::os::raw::c_char,
    __maxlen: ::std::os::raw::c_ulong,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vsnprintf(
    __s: *mut ::std::os::raw::c_char,
    __maxlen: ::std::os::raw::c_ulong,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vdprintf(
    __fd: ::std::os::raw::c_int,
    __fmt: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn dprintf(
    __fd: ::std::os::raw::c_int,
    __fmt: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fscanf(
    __stream: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn sscanf(
    __s: *const ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
  #[link_name = "\u{1}__isoc99_fscanf"]
  pub fn fscanf1(
    __stream: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}__isoc99_scanf"]
  pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}__isoc99_sscanf"]
  pub fn sscanf1(
    __s: *const ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vfscanf(
    __s: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vscanf(
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn vsscanf(
    __s: *const ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}__isoc99_vfscanf"]
  pub fn vfscanf1(
    __s: *mut FILE,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}__isoc99_vscanf"]
  pub fn vscanf1(
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}__isoc99_vsscanf"]
  pub fn vsscanf1(
    __s: *const ::std::os::raw::c_char,
    __format: *const ::std::os::raw::c_char,
    __arg: *mut __va_list_tag,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fgets(
    __s: *mut ::std::os::raw::c_char,
    __n: ::std::os::raw::c_int,
    __stream: *mut FILE,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn __getdelim(
    __lineptr: *mut *mut ::std::os::raw::c_char,
    __n: *mut size_t,
    __delimiter: ::std::os::raw::c_int,
    __stream: *mut FILE,
  ) -> __ssize_t;
}
extern "C" {
  pub fn getdelim(
    __lineptr: *mut *mut ::std::os::raw::c_char,
    __n: *mut size_t,
    __delimiter: ::std::os::raw::c_int,
    __stream: *mut FILE,
  ) -> __ssize_t;
}
extern "C" {
  pub fn getline(
    __lineptr: *mut *mut ::std::os::raw::c_char,
    __n: *mut size_t,
    __stream: *mut FILE,
  ) -> __ssize_t;
}
extern "C" {
  pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fread(
    __ptr: *mut ::std::os::raw::c_void,
    __size: ::std::os::raw::c_ulong,
    __n: ::std::os::raw::c_ulong,
    __stream: *mut FILE,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn fwrite(
    __ptr: *const ::std::os::raw::c_void,
    __size: ::std::os::raw::c_ulong,
    __n: ::std::os::raw::c_ulong,
    __s: *mut FILE,
  ) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn fread_unlocked(
    __ptr: *mut ::std::os::raw::c_void,
    __size: size_t,
    __n: size_t,
    __stream: *mut FILE,
  ) -> size_t;
}
extern "C" {
  pub fn fwrite_unlocked(
    __ptr: *const ::std::os::raw::c_void,
    __size: size_t,
    __n: size_t,
    __stream: *mut FILE,
  ) -> size_t;
}
extern "C" {
  pub fn fseek(
    __stream: *mut FILE,
    __off: ::std::os::raw::c_long,
    __whence: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn rewind(__stream: *mut FILE);
}
extern "C" {
  pub fn fseeko(
    __stream: *mut FILE,
    __off: __off_t,
    __whence: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
  pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
  pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
  pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn popen(
    __command: *const ::std::os::raw::c_char,
    __modes: *const ::std::os::raw::c_char,
  ) -> *mut FILE;
}
extern "C" {
  pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
  pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
  pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wt_off_t = off_t;
pub type WT_COLLATOR = __wt_collator;
pub type WT_COMPRESSOR = __wt_compressor;
pub type WT_CONFIG_ITEM = __wt_config_item;
pub type WT_CONFIG_PARSER = __wt_config_parser;
pub type WT_CONNECTION = __wt_connection;
pub type WT_CURSOR = __wt_cursor;
pub type WT_DATA_SOURCE = __wt_data_source;
pub type WT_ENCRYPTOR = __wt_encryptor;
pub type WT_EVENT_HANDLER = __wt_event_handler;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_extension_api {
  _unused: [u8; 0],
}
pub type WT_EXTENSION_API = __wt_extension_api;
pub type WT_EXTRACTOR = __wt_extractor;
pub type WT_FILE_HANDLE = __wt_file_handle;
pub type WT_FILE_SYSTEM = __wt_file_system;
pub type WT_ITEM = __wt_item;
pub type WT_MODIFY = __wt_modify;
pub type WT_SESSION = __wt_session;
pub type WT_STORAGE_SOURCE = __wt_storage_source;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_item {
  pub data: *const ::std::os::raw::c_void,
  pub size: size_t,
  pub mem: *mut ::std::os::raw::c_void,
  pub memsize: size_t,
  pub flags: u32,
}
#[test]
fn bindgen_test_layout___wt_item() {
  assert_eq!(
    ::std::mem::size_of::<__wt_item>(),
    40usize,
    concat!("Size of: ", stringify!(__wt_item))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_item>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_item))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_item>())).data as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_item),
      "::",
      stringify!(data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_item>())).size as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_item),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_item>())).mem as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_item),
      "::",
      stringify!(mem)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_item>())).memsize as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_item),
      "::",
      stringify!(memsize)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_item>())).flags as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_item),
      "::",
      stringify!(flags)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_modify {
  pub data: WT_ITEM,
  pub offset: size_t,
  pub size: size_t,
}
#[test]
fn bindgen_test_layout___wt_modify() {
  assert_eq!(
    ::std::mem::size_of::<__wt_modify>(),
    56usize,
    concat!("Size of: ", stringify!(__wt_modify))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_modify>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_modify))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_modify>())).data as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_modify),
      "::",
      stringify!(data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_modify>())).offset as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_modify),
      "::",
      stringify!(offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_modify>())).size as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_modify),
      "::",
      stringify!(size)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_cursor {
  pub session: *mut WT_SESSION,
  pub uri: *const ::std::os::raw::c_char,
  pub key_format: *const ::std::os::raw::c_char,
  pub value_format: *const ::std::os::raw::c_char,
  pub get_key: ::std::option::Option<
    unsafe extern "C" fn(cursor: *mut WT_CURSOR, ...) -> ::std::os::raw::c_int,
  >,
  pub get_value: ::std::option::Option<
    unsafe extern "C" fn(cursor: *mut WT_CURSOR, ...) -> ::std::os::raw::c_int,
  >,
  pub get_raw_key_value: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      key: *mut WT_ITEM,
      value: *mut WT_ITEM,
    ) -> ::std::os::raw::c_int,
  >,
  pub set_key: ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR, ...)>,
  pub set_value: ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR, ...)>,
  pub compare: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      other: *mut WT_CURSOR,
      comparep: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub equals: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      other: *mut WT_CURSOR,
      equalp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub next:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub prev:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub reset:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub search:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub search_near: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      exactp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub insert:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub modify: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      entries: *mut WT_MODIFY,
      nentries: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub update:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub remove:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub reserve:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub checkpoint_id: ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> u64>,
  pub close:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub largest_key:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub reconfigure: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub bound: ::std::option::Option<
    unsafe extern "C" fn(
      cursor: *mut WT_CURSOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub cache:
    ::std::option::Option<unsafe extern "C" fn(cursor: *mut WT_CURSOR) -> ::std::os::raw::c_int>,
  pub reopen: ::std::option::Option<
    unsafe extern "C" fn(cursor: *mut WT_CURSOR, check_only: bool) -> ::std::os::raw::c_int,
  >,
  pub uri_hash: u64,
  pub q: __wt_cursor__bindgen_ty_1,
  pub recno: u64,
  pub raw_recno_buf: [u8; 9usize],
  pub json_private: *mut ::std::os::raw::c_void,
  pub lang_private: *mut ::std::os::raw::c_void,
  pub key: WT_ITEM,
  pub value: WT_ITEM,
  pub saved_err: ::std::os::raw::c_int,
  pub internal_uri: *const ::std::os::raw::c_char,
  pub lower_bound: WT_ITEM,
  pub upper_bound: WT_ITEM,
  pub flags: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_cursor__bindgen_ty_1 {
  pub tqe_next: *mut WT_CURSOR,
  pub tqe_prev: *mut *mut WT_CURSOR,
}
#[test]
fn bindgen_test_layout___wt_cursor__bindgen_ty_1() {
  assert_eq!(
    ::std::mem::size_of::<__wt_cursor__bindgen_ty_1>(),
    16usize,
    concat!("Size of: ", stringify!(__wt_cursor__bindgen_ty_1))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_cursor__bindgen_ty_1>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_cursor__bindgen_ty_1))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor__bindgen_ty_1>())).tqe_next as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor__bindgen_ty_1),
      "::",
      stringify!(tqe_next)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor__bindgen_ty_1>())).tqe_prev as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor__bindgen_ty_1),
      "::",
      stringify!(tqe_prev)
    )
  );
}
#[test]
fn bindgen_test_layout___wt_cursor() {
  assert_eq!(
    ::std::mem::size_of::<__wt_cursor>(),
    472usize,
    concat!("Size of: ", stringify!(__wt_cursor))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_cursor>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_cursor))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).session as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(session)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).uri as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(uri)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).key_format as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(key_format)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).value_format as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(value_format)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).get_key as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(get_key)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).get_value as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(get_value)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).get_raw_key_value as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(get_raw_key_value)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).set_key as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(set_key)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).set_value as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(set_value)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).compare as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(compare)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).equals as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(equals)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).next as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(next)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).prev as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(prev)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).reset as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(reset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).search as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(search)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).search_near as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(search_near)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).insert as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(insert)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).modify as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(modify)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).update as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(update)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).remove as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(remove)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).reserve as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(reserve)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).checkpoint_id as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(checkpoint_id)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).close as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(close)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).largest_key as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(largest_key)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).reconfigure as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(reconfigure)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).bound as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(bound)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).cache as *const _ as usize },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(cache)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).reopen as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(reopen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).uri_hash as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(uri_hash)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).q as *const _ as usize },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(q)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).recno as *const _ as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(recno)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).raw_recno_buf as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(raw_recno_buf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).json_private as *const _ as usize },
    272usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(json_private)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).lang_private as *const _ as usize },
    280usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(lang_private)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).key as *const _ as usize },
    288usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(key)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).value as *const _ as usize },
    328usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(value)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).saved_err as *const _ as usize },
    368usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(saved_err)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).internal_uri as *const _ as usize },
    376usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(internal_uri)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).lower_bound as *const _ as usize },
    384usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(lower_bound)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).upper_bound as *const _ as usize },
    424usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(upper_bound)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_cursor>())).flags as *const _ as usize },
    464usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_cursor),
      "::",
      stringify!(flags)
    )
  );
}
pub const WT_TS_TXN_TYPE_WT_TS_TXN_TYPE_COMMIT: WT_TS_TXN_TYPE = 0;
pub const WT_TS_TXN_TYPE_WT_TS_TXN_TYPE_DURABLE: WT_TS_TXN_TYPE = 1;
pub const WT_TS_TXN_TYPE_WT_TS_TXN_TYPE_PREPARE: WT_TS_TXN_TYPE = 2;
pub const WT_TS_TXN_TYPE_WT_TS_TXN_TYPE_READ: WT_TS_TXN_TYPE = 3;
pub type WT_TS_TXN_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_session {
  pub connection: *mut WT_CONNECTION,
  pub app_private: *mut ::std::os::raw::c_void,
  pub close: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub reconfigure: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub strerror: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      error: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char,
  >,
  pub open_cursor: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      to_dup: *mut WT_CURSOR,
      config: *const ::std::os::raw::c_char,
      cursorp: *mut *mut WT_CURSOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub alter: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub bind_configuration: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      compiled: *const ::std::os::raw::c_char,
      ...
    ) -> ::std::os::raw::c_int,
  >,
  pub create: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub compact: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub drop: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub join: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      join_cursor: *mut WT_CURSOR,
      ref_cursor: *mut WT_CURSOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub log_flush: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub log_printf: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      format: *const ::std::os::raw::c_char,
      ...
    ) -> ::std::os::raw::c_int,
  >,
  pub rename: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      newuri: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub reset:
    ::std::option::Option<unsafe extern "C" fn(session: *mut WT_SESSION) -> ::std::os::raw::c_int>,
  pub salvage: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub truncate: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      start: *mut WT_CURSOR,
      stop: *mut WT_CURSOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub upgrade: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub verify: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub begin_transaction: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub commit_transaction: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub prepare_transaction: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub rollback_transaction: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub query_timestamp: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      hex_timestamp: *mut ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub timestamp_transaction: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub timestamp_transaction_uint: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      which: WT_TS_TXN_TYPE,
      ts: u64,
    ) -> ::std::os::raw::c_int,
  >,
  pub checkpoint: ::std::option::Option<
    unsafe extern "C" fn(
      session: *mut WT_SESSION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub reset_snapshot:
    ::std::option::Option<unsafe extern "C" fn(session: *mut WT_SESSION) -> ::std::os::raw::c_int>,
  pub transaction_pinned_range: ::std::option::Option<
    unsafe extern "C" fn(session: *mut WT_SESSION, range: *mut u64) -> ::std::os::raw::c_int,
  >,
  pub get_rollback_reason: ::std::option::Option<
    unsafe extern "C" fn(session: *mut WT_SESSION) -> *const ::std::os::raw::c_char,
  >,
  pub breakpoint:
    ::std::option::Option<unsafe extern "C" fn(session: *mut WT_SESSION) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout___wt_session() {
  assert_eq!(
    ::std::mem::size_of::<__wt_session>(),
    256usize,
    concat!("Size of: ", stringify!(__wt_session))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_session>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_session))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).connection as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(connection)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).app_private as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(app_private)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).close as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(close)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).reconfigure as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(reconfigure)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).strerror as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(strerror)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).open_cursor as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(open_cursor)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).alter as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(alter)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).bind_configuration as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(bind_configuration)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).create as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(create)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).compact as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(compact)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).drop as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(drop)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).join as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(join)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).log_flush as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(log_flush)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).log_printf as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(log_printf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).rename as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(rename)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).reset as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(reset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).salvage as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(salvage)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).truncate as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(truncate)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).upgrade as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(upgrade)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).verify as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(verify)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).begin_transaction as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(begin_transaction)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).commit_transaction as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(commit_transaction)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).prepare_transaction as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(prepare_transaction)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).rollback_transaction as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(rollback_transaction)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).query_timestamp as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(query_timestamp)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).timestamp_transaction as *const _ as usize },
    200usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(timestamp_transaction)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_session>())).timestamp_transaction_uint as *const _ as usize
    },
    208usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(timestamp_transaction_uint)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).checkpoint as *const _ as usize },
    216usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(checkpoint)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).reset_snapshot as *const _ as usize },
    224usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(reset_snapshot)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_session>())).transaction_pinned_range as *const _ as usize
    },
    232usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(transaction_pinned_range)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).get_rollback_reason as *const _ as usize },
    240usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(get_rollback_reason)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_session>())).breakpoint as *const _ as usize },
    248usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_session),
      "::",
      stringify!(breakpoint)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_connection {
  pub close: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub debug_info: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub reconfigure: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub get_home: ::std::option::Option<
    unsafe extern "C" fn(connection: *mut WT_CONNECTION) -> *const ::std::os::raw::c_char,
  >,
  pub compile_configuration: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      method: *const ::std::os::raw::c_char,
      str_: *const ::std::os::raw::c_char,
      compiled: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub configure_method: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      method: *const ::std::os::raw::c_char,
      uri: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
      type_: *const ::std::os::raw::c_char,
      check: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub is_new: ::std::option::Option<
    unsafe extern "C" fn(connection: *mut WT_CONNECTION) -> ::std::os::raw::c_int,
  >,
  pub open_session: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      event_handler: *mut WT_EVENT_HANDLER,
      config: *const ::std::os::raw::c_char,
      sessionp: *mut *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
  pub query_timestamp: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      hex_timestamp: *mut ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub set_timestamp: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub rollback_to_stable: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub load_extension: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      path: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub add_data_source: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      prefix: *const ::std::os::raw::c_char,
      data_source: *mut WT_DATA_SOURCE,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub add_collator: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      name: *const ::std::os::raw::c_char,
      collator: *mut WT_COLLATOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub add_compressor: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      name: *const ::std::os::raw::c_char,
      compressor: *mut WT_COMPRESSOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub add_encryptor: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      name: *const ::std::os::raw::c_char,
      encryptor: *mut WT_ENCRYPTOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub add_extractor: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      name: *const ::std::os::raw::c_char,
      extractor: *mut WT_EXTRACTOR,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub set_file_system: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      fs: *mut WT_FILE_SYSTEM,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub add_storage_source: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      name: *const ::std::os::raw::c_char,
      storage_source: *mut WT_STORAGE_SOURCE,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub get_storage_source: ::std::option::Option<
    unsafe extern "C" fn(
      connection: *mut WT_CONNECTION,
      name: *const ::std::os::raw::c_char,
      storage_sourcep: *mut *mut WT_STORAGE_SOURCE,
    ) -> ::std::os::raw::c_int,
  >,
  pub get_extension_api: ::std::option::Option<
    unsafe extern "C" fn(wt_conn: *mut WT_CONNECTION) -> *mut WT_EXTENSION_API,
  >,
}
#[test]
fn bindgen_test_layout___wt_connection() {
  assert_eq!(
    ::std::mem::size_of::<__wt_connection>(),
    168usize,
    concat!("Size of: ", stringify!(__wt_connection))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_connection>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_connection))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).close as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(close)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).debug_info as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(debug_info)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).reconfigure as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(reconfigure)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).get_home as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(get_home)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_connection>())).compile_configuration as *const _ as usize
    },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(compile_configuration)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).configure_method as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(configure_method)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).is_new as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(is_new)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).open_session as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(open_session)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).query_timestamp as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(query_timestamp)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).set_timestamp as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(set_timestamp)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).rollback_to_stable as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(rollback_to_stable)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).load_extension as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(load_extension)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).add_data_source as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(add_data_source)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).add_collator as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(add_collator)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).add_compressor as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(add_compressor)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).add_encryptor as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(add_encryptor)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).add_extractor as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(add_extractor)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).set_file_system as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(set_file_system)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).add_storage_source as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(add_storage_source)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).get_storage_source as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(get_storage_source)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_connection>())).get_extension_api as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_connection),
      "::",
      stringify!(get_extension_api)
    )
  );
}
extern "C" {
  pub fn wiredtiger_open(
    home: *const ::std::os::raw::c_char,
    event_handler: *mut WT_EVENT_HANDLER,
    config: *const ::std::os::raw::c_char,
    connectionp: *mut *mut WT_CONNECTION,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_strerror(error: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn wiredtiger_lex_compare(
    user_item: *const WT_ITEM,
    tree_item: *const WT_ITEM,
  ) -> ::std::os::raw::c_int;
}
pub const WT_EVENT_TYPE_WT_EVENT_COMPACT_CHECK: WT_EVENT_TYPE = 0;
pub const WT_EVENT_TYPE_WT_EVENT_CONN_CLOSE: WT_EVENT_TYPE = 1;
pub const WT_EVENT_TYPE_WT_EVENT_CONN_READY: WT_EVENT_TYPE = 2;
pub type WT_EVENT_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_event_handler {
  pub handle_error: ::std::option::Option<
    unsafe extern "C" fn(
      handler: *mut WT_EVENT_HANDLER,
      session: *mut WT_SESSION,
      error: ::std::os::raw::c_int,
      message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub handle_message: ::std::option::Option<
    unsafe extern "C" fn(
      handler: *mut WT_EVENT_HANDLER,
      session: *mut WT_SESSION,
      message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub handle_progress: ::std::option::Option<
    unsafe extern "C" fn(
      handler: *mut WT_EVENT_HANDLER,
      session: *mut WT_SESSION,
      operation: *const ::std::os::raw::c_char,
      progress: u64,
    ) -> ::std::os::raw::c_int,
  >,
  pub handle_close: ::std::option::Option<
    unsafe extern "C" fn(
      handler: *mut WT_EVENT_HANDLER,
      session: *mut WT_SESSION,
      cursor: *mut WT_CURSOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub handle_general: ::std::option::Option<
    unsafe extern "C" fn(
      handler: *mut WT_EVENT_HANDLER,
      wt_conn: *mut WT_CONNECTION,
      session: *mut WT_SESSION,
      type_: WT_EVENT_TYPE,
      arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_event_handler() {
  assert_eq!(
    ::std::mem::size_of::<__wt_event_handler>(),
    40usize,
    concat!("Size of: ", stringify!(__wt_event_handler))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_event_handler>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_event_handler))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_event_handler>())).handle_error as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_event_handler),
      "::",
      stringify!(handle_error)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_event_handler>())).handle_message as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_event_handler),
      "::",
      stringify!(handle_message)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_event_handler>())).handle_progress as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_event_handler),
      "::",
      stringify!(handle_progress)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_event_handler>())).handle_close as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_event_handler),
      "::",
      stringify!(handle_close)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_event_handler>())).handle_general as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_event_handler),
      "::",
      stringify!(handle_general)
    )
  );
}
extern "C" {
  pub fn wiredtiger_struct_pack(
    session: *mut WT_SESSION,
    buffer: *mut ::std::os::raw::c_void,
    len: size_t,
    format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_struct_size(
    session: *mut WT_SESSION,
    lenp: *mut size_t,
    format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_struct_unpack(
    session: *mut WT_SESSION,
    buffer: *const ::std::os::raw::c_void,
    len: size_t,
    format: *const ::std::os::raw::c_char,
    ...
  ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_pack_stream {
  _unused: [u8; 0],
}
pub type WT_PACK_STREAM = __wt_pack_stream;
extern "C" {
  pub fn wiredtiger_pack_start(
    session: *mut WT_SESSION,
    format: *const ::std::os::raw::c_char,
    buffer: *mut ::std::os::raw::c_void,
    size: size_t,
    psp: *mut *mut WT_PACK_STREAM,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_unpack_start(
    session: *mut WT_SESSION,
    format: *const ::std::os::raw::c_char,
    buffer: *const ::std::os::raw::c_void,
    size: size_t,
    psp: *mut *mut WT_PACK_STREAM,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_pack_close(
    ps: *mut WT_PACK_STREAM,
    usedp: *mut size_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_pack_item(ps: *mut WT_PACK_STREAM, item: *mut WT_ITEM)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_pack_int(ps: *mut WT_PACK_STREAM, i: i64) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_pack_str(
    ps: *mut WT_PACK_STREAM,
    s: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_pack_uint(ps: *mut WT_PACK_STREAM, u: u64) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_unpack_item(
    ps: *mut WT_PACK_STREAM,
    item: *mut WT_ITEM,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_unpack_int(ps: *mut WT_PACK_STREAM, ip: *mut i64) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_unpack_str(
    ps: *mut WT_PACK_STREAM,
    sp: *mut *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_unpack_uint(ps: *mut WT_PACK_STREAM, up: *mut u64) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_config_item {
  pub str_: *const ::std::os::raw::c_char,
  pub len: size_t,
  pub val: i64,
  pub type_: __wt_config_item_WT_CONFIG_ITEM_TYPE,
}
pub const __wt_config_item_WT_CONFIG_ITEM_TYPE_WT_CONFIG_ITEM_STRING:
  __wt_config_item_WT_CONFIG_ITEM_TYPE = 0;
pub const __wt_config_item_WT_CONFIG_ITEM_TYPE_WT_CONFIG_ITEM_BOOL:
  __wt_config_item_WT_CONFIG_ITEM_TYPE = 1;
pub const __wt_config_item_WT_CONFIG_ITEM_TYPE_WT_CONFIG_ITEM_ID:
  __wt_config_item_WT_CONFIG_ITEM_TYPE = 2;
pub const __wt_config_item_WT_CONFIG_ITEM_TYPE_WT_CONFIG_ITEM_NUM:
  __wt_config_item_WT_CONFIG_ITEM_TYPE = 3;
pub const __wt_config_item_WT_CONFIG_ITEM_TYPE_WT_CONFIG_ITEM_STRUCT:
  __wt_config_item_WT_CONFIG_ITEM_TYPE = 4;
pub type __wt_config_item_WT_CONFIG_ITEM_TYPE = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout___wt_config_item() {
  assert_eq!(
    ::std::mem::size_of::<__wt_config_item>(),
    32usize,
    concat!("Size of: ", stringify!(__wt_config_item))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_config_item>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_config_item))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_item>())).str_ as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_item),
      "::",
      stringify!(str_)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_item>())).len as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_item),
      "::",
      stringify!(len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_item>())).val as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_item),
      "::",
      stringify!(val)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_item>())).type_ as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_item),
      "::",
      stringify!(type_)
    )
  );
}
pub use self::__wt_config_item_WT_CONFIG_ITEM_TYPE as WT_CONFIG_ITEM_TYPE;
extern "C" {
  pub fn wiredtiger_config_validate(
    session: *mut WT_SESSION,
    event_handler: *mut WT_EVENT_HANDLER,
    name: *const ::std::os::raw::c_char,
    config: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_config_parser_open(
    session: *mut WT_SESSION,
    config: *const ::std::os::raw::c_char,
    len: size_t,
    config_parserp: *mut *mut WT_CONFIG_PARSER,
  ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_config_parser {
  pub close: ::std::option::Option<
    unsafe extern "C" fn(config_parser: *mut WT_CONFIG_PARSER) -> ::std::os::raw::c_int,
  >,
  pub next: ::std::option::Option<
    unsafe extern "C" fn(
      config_parser: *mut WT_CONFIG_PARSER,
      key: *mut WT_CONFIG_ITEM,
      value: *mut WT_CONFIG_ITEM,
    ) -> ::std::os::raw::c_int,
  >,
  pub get: ::std::option::Option<
    unsafe extern "C" fn(
      config_parser: *mut WT_CONFIG_PARSER,
      key: *const ::std::os::raw::c_char,
      value: *mut WT_CONFIG_ITEM,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_config_parser() {
  assert_eq!(
    ::std::mem::size_of::<__wt_config_parser>(),
    24usize,
    concat!("Size of: ", stringify!(__wt_config_parser))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_config_parser>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_config_parser))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_parser>())).close as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_parser),
      "::",
      stringify!(close)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_parser>())).next as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_parser),
      "::",
      stringify!(next)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_config_parser>())).get as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_config_parser),
      "::",
      stringify!(get)
    )
  );
}
extern "C" {
  pub fn wiredtiger_crc32c_func() -> ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: size_t) -> u32,
  >;
}
extern "C" {
  pub fn wiredtiger_crc32c_with_seed_func() -> ::std::option::Option<
    unsafe extern "C" fn(arg1: u32, arg2: *const ::std::os::raw::c_void, arg3: size_t) -> u32,
  >;
}
extern "C" {
  pub fn wiredtiger_calc_modify(
    session: *mut WT_SESSION,
    oldv: *const WT_ITEM,
    newv: *const WT_ITEM,
    maxdiff: size_t,
    entries: *mut WT_MODIFY,
    nentriesp: *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_version(
    majorp: *mut ::std::os::raw::c_int,
    minorp: *mut ::std::os::raw::c_int,
    patchp: *mut ::std::os::raw::c_int,
  ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_config_arg {
  _unused: [u8; 0],
}
pub type WT_CONFIG_ARG = __wt_config_arg;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_collator {
  pub compare: ::std::option::Option<
    unsafe extern "C" fn(
      collator: *mut WT_COLLATOR,
      session: *mut WT_SESSION,
      key1: *const WT_ITEM,
      key2: *const WT_ITEM,
      cmp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub customize: ::std::option::Option<
    unsafe extern "C" fn(
      collator: *mut WT_COLLATOR,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      passcfg: *mut WT_CONFIG_ITEM,
      customp: *mut *mut WT_COLLATOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      collator: *mut WT_COLLATOR,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_collator() {
  assert_eq!(
    ::std::mem::size_of::<__wt_collator>(),
    24usize,
    concat!("Size of: ", stringify!(__wt_collator))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_collator>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_collator))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_collator>())).compare as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_collator),
      "::",
      stringify!(compare)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_collator>())).customize as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_collator),
      "::",
      stringify!(customize)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_collator>())).terminate as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_collator),
      "::",
      stringify!(terminate)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_compressor {
  pub compress: ::std::option::Option<
    unsafe extern "C" fn(
      compressor: *mut WT_COMPRESSOR,
      session: *mut WT_SESSION,
      src: *mut u8,
      src_len: size_t,
      dst: *mut u8,
      dst_len: size_t,
      result_lenp: *mut size_t,
      compression_failed: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub decompress: ::std::option::Option<
    unsafe extern "C" fn(
      compressor: *mut WT_COMPRESSOR,
      session: *mut WT_SESSION,
      src: *mut u8,
      src_len: size_t,
      dst: *mut u8,
      dst_len: size_t,
      result_lenp: *mut size_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub pre_size: ::std::option::Option<
    unsafe extern "C" fn(
      compressor: *mut WT_COMPRESSOR,
      session: *mut WT_SESSION,
      src: *mut u8,
      src_len: size_t,
      result_lenp: *mut size_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      compressor: *mut WT_COMPRESSOR,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_compressor() {
  assert_eq!(
    ::std::mem::size_of::<__wt_compressor>(),
    32usize,
    concat!("Size of: ", stringify!(__wt_compressor))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_compressor>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_compressor))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_compressor>())).compress as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_compressor),
      "::",
      stringify!(compress)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_compressor>())).decompress as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_compressor),
      "::",
      stringify!(decompress)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_compressor>())).pre_size as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_compressor),
      "::",
      stringify!(pre_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_compressor>())).terminate as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_compressor),
      "::",
      stringify!(terminate)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_data_source {
  pub alter: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub create: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub compact: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub drop: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub open_cursor: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
      new_cursor: *mut *mut WT_CURSOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub rename: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      newuri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub salvage: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub size: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      size: *mut wt_off_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub truncate: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub range_truncate: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      start: *mut WT_CURSOR,
      stop: *mut WT_CURSOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub verify: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub checkpoint: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
      config: *mut WT_CONFIG_ARG,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
  pub lsm_pre_merge: ::std::option::Option<
    unsafe extern "C" fn(
      dsrc: *mut WT_DATA_SOURCE,
      source: *mut WT_CURSOR,
      dest: *mut WT_CURSOR,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_data_source() {
  assert_eq!(
    ::std::mem::size_of::<__wt_data_source>(),
    112usize,
    concat!("Size of: ", stringify!(__wt_data_source))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_data_source>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_data_source))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).alter as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(alter)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).create as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(create)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).compact as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(compact)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).drop as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(drop)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).open_cursor as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(open_cursor)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).rename as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(rename)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).salvage as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(salvage)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).size as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).truncate as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(truncate)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).range_truncate as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(range_truncate)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).verify as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(verify)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).checkpoint as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(checkpoint)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).terminate as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(terminate)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_data_source>())).lsm_pre_merge as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_data_source),
      "::",
      stringify!(lsm_pre_merge)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_encryptor {
  pub encrypt: ::std::option::Option<
    unsafe extern "C" fn(
      encryptor: *mut WT_ENCRYPTOR,
      session: *mut WT_SESSION,
      src: *mut u8,
      src_len: size_t,
      dst: *mut u8,
      dst_len: size_t,
      result_lenp: *mut size_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub decrypt: ::std::option::Option<
    unsafe extern "C" fn(
      encryptor: *mut WT_ENCRYPTOR,
      session: *mut WT_SESSION,
      src: *mut u8,
      src_len: size_t,
      dst: *mut u8,
      dst_len: size_t,
      result_lenp: *mut size_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub sizing: ::std::option::Option<
    unsafe extern "C" fn(
      encryptor: *mut WT_ENCRYPTOR,
      session: *mut WT_SESSION,
      expansion_constantp: *mut size_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub customize: ::std::option::Option<
    unsafe extern "C" fn(
      encryptor: *mut WT_ENCRYPTOR,
      session: *mut WT_SESSION,
      encrypt_config: *mut WT_CONFIG_ARG,
      customp: *mut *mut WT_ENCRYPTOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      encryptor: *mut WT_ENCRYPTOR,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_encryptor() {
  assert_eq!(
    ::std::mem::size_of::<__wt_encryptor>(),
    40usize,
    concat!("Size of: ", stringify!(__wt_encryptor))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_encryptor>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_encryptor))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_encryptor>())).encrypt as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_encryptor),
      "::",
      stringify!(encrypt)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_encryptor>())).decrypt as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_encryptor),
      "::",
      stringify!(decrypt)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_encryptor>())).sizing as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_encryptor),
      "::",
      stringify!(sizing)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_encryptor>())).customize as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_encryptor),
      "::",
      stringify!(customize)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_encryptor>())).terminate as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_encryptor),
      "::",
      stringify!(terminate)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_extractor {
  pub extract: ::std::option::Option<
    unsafe extern "C" fn(
      extractor: *mut WT_EXTRACTOR,
      session: *mut WT_SESSION,
      key: *const WT_ITEM,
      value: *const WT_ITEM,
      result_cursor: *mut WT_CURSOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub customize: ::std::option::Option<
    unsafe extern "C" fn(
      extractor: *mut WT_EXTRACTOR,
      session: *mut WT_SESSION,
      uri: *const ::std::os::raw::c_char,
      appcfg: *mut WT_CONFIG_ITEM,
      customp: *mut *mut WT_EXTRACTOR,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      extractor: *mut WT_EXTRACTOR,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_extractor() {
  assert_eq!(
    ::std::mem::size_of::<__wt_extractor>(),
    24usize,
    concat!("Size of: ", stringify!(__wt_extractor))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_extractor>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_extractor))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_extractor>())).extract as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_extractor),
      "::",
      stringify!(extract)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_extractor>())).customize as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_extractor),
      "::",
      stringify!(customize)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_extractor>())).terminate as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_extractor),
      "::",
      stringify!(terminate)
    )
  );
}
pub const WT_FS_OPEN_FILE_TYPE_WT_FS_OPEN_FILE_TYPE_CHECKPOINT: WT_FS_OPEN_FILE_TYPE = 0;
pub const WT_FS_OPEN_FILE_TYPE_WT_FS_OPEN_FILE_TYPE_DATA: WT_FS_OPEN_FILE_TYPE = 1;
pub const WT_FS_OPEN_FILE_TYPE_WT_FS_OPEN_FILE_TYPE_DIRECTORY: WT_FS_OPEN_FILE_TYPE = 2;
pub const WT_FS_OPEN_FILE_TYPE_WT_FS_OPEN_FILE_TYPE_LOG: WT_FS_OPEN_FILE_TYPE = 3;
pub const WT_FS_OPEN_FILE_TYPE_WT_FS_OPEN_FILE_TYPE_REGULAR: WT_FS_OPEN_FILE_TYPE = 4;
pub type WT_FS_OPEN_FILE_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_file_system {
  pub fs_directory_list: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      directory: *const ::std::os::raw::c_char,
      prefix: *const ::std::os::raw::c_char,
      dirlist: *mut *mut *mut ::std::os::raw::c_char,
      countp: *mut u32,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_directory_list_single: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      directory: *const ::std::os::raw::c_char,
      prefix: *const ::std::os::raw::c_char,
      dirlist: *mut *mut *mut ::std::os::raw::c_char,
      countp: *mut u32,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_directory_list_free: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      dirlist: *mut *mut ::std::os::raw::c_char,
      count: u32,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_exist: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      existp: *mut bool,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_open_file: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      file_type: WT_FS_OPEN_FILE_TYPE,
      flags: u32,
      file_handlep: *mut *mut WT_FILE_HANDLE,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_remove: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      flags: u32,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_rename: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      from: *const ::std::os::raw::c_char,
      to: *const ::std::os::raw::c_char,
      flags: u32,
    ) -> ::std::os::raw::c_int,
  >,
  pub fs_size: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
      name: *const ::std::os::raw::c_char,
      sizep: *mut wt_off_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      file_system: *mut WT_FILE_SYSTEM,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_file_system() {
  assert_eq!(
    ::std::mem::size_of::<__wt_file_system>(),
    72usize,
    concat!("Size of: ", stringify!(__wt_file_system))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_file_system>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_file_system))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).fs_directory_list as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_directory_list)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_file_system>())).fs_directory_list_single as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_directory_list_single)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_file_system>())).fs_directory_list_free as *const _ as usize
    },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_directory_list_free)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).fs_exist as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_exist)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).fs_open_file as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_open_file)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).fs_remove as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_remove)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).fs_rename as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_rename)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).fs_size as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(fs_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_system>())).terminate as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_system),
      "::",
      stringify!(terminate)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_file_handle {
  pub file_system: *mut WT_FILE_SYSTEM,
  pub name: *mut ::std::os::raw::c_char,
  pub close: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_advise: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      offset: wt_off_t,
      len: wt_off_t,
      advice: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_extend: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      offset: wt_off_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_extend_nolock: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      offset: wt_off_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_lock: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      lock: bool,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_map: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      mapped_regionp: *mut *mut ::std::os::raw::c_void,
      lengthp: *mut size_t,
      mapped_cookiep: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_map_discard: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      map: *mut ::std::os::raw::c_void,
      length: size_t,
      mapped_cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_map_preload: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      map: *const ::std::os::raw::c_void,
      length: size_t,
      mapped_cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_unmap: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      mapped_region: *mut ::std::os::raw::c_void,
      length: size_t,
      mapped_cookie: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_read: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      offset: wt_off_t,
      len: size_t,
      buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_size: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      sizep: *mut wt_off_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_sync: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_sync_nowait: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_truncate: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      offset: wt_off_t,
    ) -> ::std::os::raw::c_int,
  >,
  pub fh_write: ::std::option::Option<
    unsafe extern "C" fn(
      file_handle: *mut WT_FILE_HANDLE,
      session: *mut WT_SESSION,
      offset: wt_off_t,
      length: size_t,
      buf: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_file_handle() {
  assert_eq!(
    ::std::mem::size_of::<__wt_file_handle>(),
    136usize,
    concat!("Size of: ", stringify!(__wt_file_handle))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_file_handle>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_file_handle))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).file_system as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(file_system)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).name as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(name)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).close as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(close)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_advise as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_advise)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_extend as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_extend)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_extend_nolock as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_extend_nolock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_lock as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_lock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_map as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_map)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_map_discard as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_map_discard)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_map_preload as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_map_preload)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_unmap as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_unmap)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_read as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_read)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_size as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_sync as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_sync)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_sync_nowait as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_sync_nowait)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_truncate as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_truncate)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_file_handle>())).fh_write as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_file_handle),
      "::",
      stringify!(fh_write)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __wt_storage_source {
  pub ss_add_reference: ::std::option::Option<
    unsafe extern "C" fn(storage_source: *mut WT_STORAGE_SOURCE) -> ::std::os::raw::c_int,
  >,
  pub ss_customize_file_system: ::std::option::Option<
    unsafe extern "C" fn(
      storage_source: *mut WT_STORAGE_SOURCE,
      session: *mut WT_SESSION,
      bucket_name: *const ::std::os::raw::c_char,
      auth_token: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
      file_system: *mut *mut WT_FILE_SYSTEM,
    ) -> ::std::os::raw::c_int,
  >,
  pub ss_flush: ::std::option::Option<
    unsafe extern "C" fn(
      storage_source: *mut WT_STORAGE_SOURCE,
      session: *mut WT_SESSION,
      file_system: *mut WT_FILE_SYSTEM,
      source: *const ::std::os::raw::c_char,
      object: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub ss_flush_finish: ::std::option::Option<
    unsafe extern "C" fn(
      storage_source: *mut WT_STORAGE_SOURCE,
      session: *mut WT_SESSION,
      file_system: *mut WT_FILE_SYSTEM,
      source: *const ::std::os::raw::c_char,
      object: *const ::std::os::raw::c_char,
      config: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
  >,
  pub terminate: ::std::option::Option<
    unsafe extern "C" fn(
      storage_source: *mut WT_STORAGE_SOURCE,
      session: *mut WT_SESSION,
    ) -> ::std::os::raw::c_int,
  >,
}
#[test]
fn bindgen_test_layout___wt_storage_source() {
  assert_eq!(
    ::std::mem::size_of::<__wt_storage_source>(),
    40usize,
    concat!("Size of: ", stringify!(__wt_storage_source))
  );
  assert_eq!(
    ::std::mem::align_of::<__wt_storage_source>(),
    8usize,
    concat!("Alignment of ", stringify!(__wt_storage_source))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_storage_source>())).ss_add_reference as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_storage_source),
      "::",
      stringify!(ss_add_reference)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<__wt_storage_source>())).ss_customize_file_system as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_storage_source),
      "::",
      stringify!(ss_customize_file_system)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_storage_source>())).ss_flush as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_storage_source),
      "::",
      stringify!(ss_flush)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_storage_source>())).ss_flush_finish as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_storage_source),
      "::",
      stringify!(ss_flush_finish)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__wt_storage_source>())).terminate as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(__wt_storage_source),
      "::",
      stringify!(terminate)
    )
  );
}
extern "C" {
  pub fn wiredtiger_extension_init(
    connection: *mut WT_CONNECTION,
    config: *mut WT_CONFIG_ARG,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn wiredtiger_extension_terminate(connection: *mut WT_CONNECTION) -> ::std::os::raw::c_int;
}
pub const WT_VERBOSE_CATEGORY_WT_VERB_ALL: WT_VERBOSE_CATEGORY = 0;
pub const WT_VERBOSE_CATEGORY_WT_VERB_API: WT_VERBOSE_CATEGORY = 1;
pub const WT_VERBOSE_CATEGORY_WT_VERB_BACKUP: WT_VERBOSE_CATEGORY = 2;
pub const WT_VERBOSE_CATEGORY_WT_VERB_BLKCACHE: WT_VERBOSE_CATEGORY = 3;
pub const WT_VERBOSE_CATEGORY_WT_VERB_BLOCK: WT_VERBOSE_CATEGORY = 4;
pub const WT_VERBOSE_CATEGORY_WT_VERB_CHECKPOINT: WT_VERBOSE_CATEGORY = 5;
pub const WT_VERBOSE_CATEGORY_WT_VERB_CHECKPOINT_CLEANUP: WT_VERBOSE_CATEGORY = 6;
pub const WT_VERBOSE_CATEGORY_WT_VERB_CHECKPOINT_PROGRESS: WT_VERBOSE_CATEGORY = 7;
pub const WT_VERBOSE_CATEGORY_WT_VERB_CHUNKCACHE: WT_VERBOSE_CATEGORY = 8;
pub const WT_VERBOSE_CATEGORY_WT_VERB_COMPACT: WT_VERBOSE_CATEGORY = 9;
pub const WT_VERBOSE_CATEGORY_WT_VERB_COMPACT_PROGRESS: WT_VERBOSE_CATEGORY = 10;
pub const WT_VERBOSE_CATEGORY_WT_VERB_CONFIGURATION: WT_VERBOSE_CATEGORY = 11;
pub const WT_VERBOSE_CATEGORY_WT_VERB_DEFAULT: WT_VERBOSE_CATEGORY = 12;
pub const WT_VERBOSE_CATEGORY_WT_VERB_ERROR_RETURNS: WT_VERBOSE_CATEGORY = 13;
pub const WT_VERBOSE_CATEGORY_WT_VERB_EVICT: WT_VERBOSE_CATEGORY = 14;
pub const WT_VERBOSE_CATEGORY_WT_VERB_EVICTSERVER: WT_VERBOSE_CATEGORY = 15;
pub const WT_VERBOSE_CATEGORY_WT_VERB_EVICT_STUCK: WT_VERBOSE_CATEGORY = 16;
pub const WT_VERBOSE_CATEGORY_WT_VERB_EXTENSION: WT_VERBOSE_CATEGORY = 17;
pub const WT_VERBOSE_CATEGORY_WT_VERB_FILEOPS: WT_VERBOSE_CATEGORY = 18;
pub const WT_VERBOSE_CATEGORY_WT_VERB_GENERATION: WT_VERBOSE_CATEGORY = 19;
pub const WT_VERBOSE_CATEGORY_WT_VERB_HANDLEOPS: WT_VERBOSE_CATEGORY = 20;
pub const WT_VERBOSE_CATEGORY_WT_VERB_HS: WT_VERBOSE_CATEGORY = 21;
pub const WT_VERBOSE_CATEGORY_WT_VERB_HS_ACTIVITY: WT_VERBOSE_CATEGORY = 22;
pub const WT_VERBOSE_CATEGORY_WT_VERB_LOG: WT_VERBOSE_CATEGORY = 23;
pub const WT_VERBOSE_CATEGORY_WT_VERB_LSM: WT_VERBOSE_CATEGORY = 24;
pub const WT_VERBOSE_CATEGORY_WT_VERB_LSM_MANAGER: WT_VERBOSE_CATEGORY = 25;
pub const WT_VERBOSE_CATEGORY_WT_VERB_MUTEX: WT_VERBOSE_CATEGORY = 26;
pub const WT_VERBOSE_CATEGORY_WT_VERB_METADATA: WT_VERBOSE_CATEGORY = 27;
pub const WT_VERBOSE_CATEGORY_WT_VERB_OUT_OF_ORDER: WT_VERBOSE_CATEGORY = 28;
pub const WT_VERBOSE_CATEGORY_WT_VERB_OVERFLOW: WT_VERBOSE_CATEGORY = 29;
pub const WT_VERBOSE_CATEGORY_WT_VERB_PREFETCH: WT_VERBOSE_CATEGORY = 30;
pub const WT_VERBOSE_CATEGORY_WT_VERB_READ: WT_VERBOSE_CATEGORY = 31;
pub const WT_VERBOSE_CATEGORY_WT_VERB_RECONCILE: WT_VERBOSE_CATEGORY = 32;
pub const WT_VERBOSE_CATEGORY_WT_VERB_RECOVERY: WT_VERBOSE_CATEGORY = 33;
pub const WT_VERBOSE_CATEGORY_WT_VERB_RECOVERY_PROGRESS: WT_VERBOSE_CATEGORY = 34;
pub const WT_VERBOSE_CATEGORY_WT_VERB_RTS: WT_VERBOSE_CATEGORY = 35;
pub const WT_VERBOSE_CATEGORY_WT_VERB_SALVAGE: WT_VERBOSE_CATEGORY = 36;
pub const WT_VERBOSE_CATEGORY_WT_VERB_SHARED_CACHE: WT_VERBOSE_CATEGORY = 37;
pub const WT_VERBOSE_CATEGORY_WT_VERB_SPLIT: WT_VERBOSE_CATEGORY = 38;
pub const WT_VERBOSE_CATEGORY_WT_VERB_TEMPORARY: WT_VERBOSE_CATEGORY = 39;
pub const WT_VERBOSE_CATEGORY_WT_VERB_THREAD_GROUP: WT_VERBOSE_CATEGORY = 40;
pub const WT_VERBOSE_CATEGORY_WT_VERB_TIERED: WT_VERBOSE_CATEGORY = 41;
pub const WT_VERBOSE_CATEGORY_WT_VERB_TIMESTAMP: WT_VERBOSE_CATEGORY = 42;
pub const WT_VERBOSE_CATEGORY_WT_VERB_TRANSACTION: WT_VERBOSE_CATEGORY = 43;
pub const WT_VERBOSE_CATEGORY_WT_VERB_VERIFY: WT_VERBOSE_CATEGORY = 44;
pub const WT_VERBOSE_CATEGORY_WT_VERB_VERSION: WT_VERBOSE_CATEGORY = 45;
pub const WT_VERBOSE_CATEGORY_WT_VERB_WRITE: WT_VERBOSE_CATEGORY = 46;
pub const WT_VERBOSE_CATEGORY_WT_VERB_NUM_CATEGORIES: WT_VERBOSE_CATEGORY = 47;
pub type WT_VERBOSE_CATEGORY = ::std::os::raw::c_uint;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_ERROR: WT_VERBOSE_LEVEL = -3;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_WARNING: WT_VERBOSE_LEVEL = -2;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_NOTICE: WT_VERBOSE_LEVEL = -1;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_INFO: WT_VERBOSE_LEVEL = 0;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_DEBUG_1: WT_VERBOSE_LEVEL = 1;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_DEBUG_2: WT_VERBOSE_LEVEL = 2;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_DEBUG_3: WT_VERBOSE_LEVEL = 3;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_DEBUG_4: WT_VERBOSE_LEVEL = 4;
pub const WT_VERBOSE_LEVEL_WT_VERBOSE_DEBUG_5: WT_VERBOSE_LEVEL = 5;
pub type WT_VERBOSE_LEVEL = ::std::os::raw::c_int;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
  pub gp_offset: ::std::os::raw::c_uint,
  pub fp_offset: ::std::os::raw::c_uint,
  pub overflow_arg_area: *mut ::std::os::raw::c_void,
  pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
  assert_eq!(
    ::std::mem::size_of::<__va_list_tag>(),
    24usize,
    concat!("Size of: ", stringify!(__va_list_tag))
  );
  assert_eq!(
    ::std::mem::align_of::<__va_list_tag>(),
    8usize,
    concat!("Alignment of ", stringify!(__va_list_tag))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(gp_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(fp_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(overflow_arg_area)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(reg_save_area)
    )
  );
}
